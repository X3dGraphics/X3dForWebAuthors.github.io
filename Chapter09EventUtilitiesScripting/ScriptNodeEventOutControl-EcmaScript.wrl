#VRML V2.0 utf8
# X3D-to-VRML-97 XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 9.1.0.2 from Saxonica

# [X3D] VRML V3.3 utf8
# PROFILE Immersive
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

# META "title" "ScriptNodeEventOutControl-EcmaScript.x3d"
# META "description" "Script node interface between X3D and EcmaScript: this conformance example tests event-based X3D-EcmaScript functionality."
# META "creator" "Don Brutzman"
# META "created" "30 November 1997"
# META "translated" "13 May 2001"
# META "modified" "10 January 2014"
# META "reference" "http://www.web3d.org/x3d/content/examples/Basic/ScriptConformance/ScriptNodeEventOutControl-EcmaScript.x3d"
# META "identifier" "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter09-EventUtilitiesScripting/ScriptNodeEventOutControl-EcmaScript.x3d"
# META "reference" "VRML 97 Specification, Annex C, ECMAScript scripting reference"
# META "reference" "http://www.web3d.org/technicalinfo/specifications/vrml97/part1/javascript.html"
# META "reference" "http://www.web3d.org/technicalinfo/specifications/vrml97/part1/javascript.html#AccessingFields"
# META "reference" "Makefile"
# META "reference" "Makefile.out"
# META "reference" "ScriptNodeEventOutControl-EcmaScript-VrmlConsoleOutput.txt"
# META "reference" "ScriptNodeEventOutControl-EcmaScriptSnapshots.html"
# META "reference" "ScriptNodeEventOutControl-Java.x3d"
# META "subject" "VRML X3D EcmaScript Script conformance"
# META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
# META "license" "../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

Viewpoint {
  description "View test"
  position 0 0 12
}
Group {
  children [
      DEF ClickTextToTest TouchSensor {
         # description "Click text to test"
      }
      DEF TextPosition Transform {
        children [
            # TextPosition translation is modified by InterfaceScriptNode.
            Shape {
              geometry DEF MessageToUser Text {
                string [ "Default text in X3D scene will be replaced by" "Java initialize() in Script using EventOut control." "This text appears first, if Java initialization fails." "" ]
                fontStyle FontStyle {
                  justify [ "MIDDLE" "MIDDLE"  ] 
                  size 0.8
                }
              }
              appearance Appearance {
                material DEF TextMaterial Material {
                  diffuseColor 0.8 0.2 0.2
                  shininess 0.9
                }
              }
            }
        ]
      }
      DEF InterfaceScriptNode Script {
        # No default values are allowed for eventIn or eventOut.
        eventIn      SFTime	startTime
        eventOut     MFString	changedText
        eventOut     SFVec3f	changedPosition
        eventOut     SFColor	changedColor

	url [ "javascript: // ### X3D Browser.print() not supported by all VRML97 viewers, instead simply using print()


function initialize ()
{
	DEBUG = true;
	mode  = 1;
	if (DEBUG) printing ('initialize ():');

	changedText = new MFString (
	'EcmaScript initialize () with eventOut control',
 	'has reinitialized the changedText node.',
 	'',
 	'Please click text for additional results.');
	changedPosition = new SFVec3f ( 0, 3, 0 );
	changedColor    = new SFColor ( 0.8, 0.8, 0.2 );
	if (DEBUG) printing ('changedText =' + changedText);
	if (DEBUG) printing ('changedPosition =' + changedPosition);
	if (DEBUG) printing ('changedColor =' + changedColor);
}
function startTime (value, timestamp)
{
	if (DEBUG) printing ('==============================');
	if (DEBUG) printing ('touchEvent startTime =' + value);

	mode = (mode + 1) % 3;
	if (DEBUG) printing ('mode =' + mode);
	switch (mode)
	{
	  case 0:	// pre-initialize error messsage
		changedText = new MFString (
		'Default text in X3D scene will be replaced by',
 		'EcmaScript initialize() in Script using EventOut control.',
 		'This text appears first, if EcmaScript initialization fails.',
 		'');
 		changedPosition = new SFVec3f ( 0, 1, 0 );
		changedColor    = new SFColor ( 0.8, 0.2, 0.2 ); 
	  	break;

	  case 1:	// post-initialize ready-to-click message
		initialize ();
		break;

	  case 2:	// post-click all-done message
		changedText = new MFString (
		'User click on text seen by EcmaScript',
 		'function via Script node eventIn.',
 		'Text & position successfully changed',
 		'via EventOut control.  Test passed.');
	 	changedPosition = new SFVec3f ( 0, -1, 0 );
	 	changedColor    = new SFColor ( 0.2, 0.8, 0.2 );
		break;
	}
		
	if (mode != 1)
	{
	 	if (DEBUG) printing ('changedText     =' + changedText);
	 	if (DEBUG) printing ('changedPosition =' + changedPosition);
	 	if (DEBUG) printing ('changedColor    =' + changedColor);
	 	if (DEBUG) printing ();
 	}
}
function shutdown()
{
	if (DEBUG) printing ('==============================');
  	if (DEBUG) printing ('script shutdown.');
	if (DEBUG) printing ('==============================');
}

      
" ]
      }
  ]
}
ROUTE ClickTextToTest.touchTime TO InterfaceScriptNode.startTime
ROUTE InterfaceScriptNode.changedText TO MessageToUser.set_string
ROUTE InterfaceScriptNode.changedPosition TO TextPosition.set_translation
ROUTE InterfaceScriptNode.changedColor TO TextMaterial.set_diffuseColor
