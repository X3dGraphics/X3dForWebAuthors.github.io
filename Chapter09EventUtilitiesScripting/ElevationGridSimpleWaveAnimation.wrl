#VRML V2.0 utf8
# X3D-to-VRML-97 XSL translation autogenerated by X3dToVrml97.xslt
# https://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: Saxonica

# [X3D] VRML V3.3 utf8
# PROFILE Immersive
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=https://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

# META "title" "ElevationGridSimpleWaveAnimation.x3d"
# META "description" "Simple Javascript animation of ElevationGrid"
# META "creator" "Don Brutzman"
# META "created" "2 December 2012"
# META "modified" "20 October 2019"
# META "Image" "ElevationGridSimpleWaveAnimation.png"
# META "identifier" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter09EventUtilitiesScripting/ElevationGridSimpleWaveAnimation.x3d"
# META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
# META "license" "../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

WorldInfo {
  title "ElevationGridSimpleWaveAnimation.x3d"
}
Viewpoint {
  description "Wave view"
  orientation 1 0 0 -0.358771
  position 0 3 8
}
Background {
  groundColor [ 1 1 1 ]
  skyColor [ 1 1 1 ]
}
# Shift zero-based ElevationGrid to left, centering it
Transform {
  translation -4 0 0
  children [
      Shape {
        geometry DEF GridSurface ElevationGrid {
          height [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
          solid FALSE
          xDimension 9
          zDimension 3
        }
        appearance Appearance {
          material Material {
            diffuseColor 0 0.5 1
          }
        }
      }
  ]
}
DEF Clock TimeSensor {
  cycleInterval 5
  loop TRUE
}
DEF WaveGenerationScript Script {
  eventIn      SFFloat	newInputValue    # [appinfo] provide value and trigger new computation

  eventOut     MFFloat	gridOutput    # [appinfo] provide values to ElevationGrid

  field        SFTime	waveStep 0.1    # [appinfo] wave variation


	url [ "javascript:

function newInputValue (eventValue)
{
   fraction = eventValue; // connected by ROUTE, receives values from TimeSensor Clock fraction_changed
   
   value0 = 0.2 * Math.sin (2 * Math.PI * (fraction - 4*waveStep));
   value1 = 0.2 * Math.sin (2 * Math.PI * (fraction - 3*waveStep));
   value2 = 0.2 * Math.sin (2 * Math.PI * (fraction - 2*waveStep));
   value3 = 0.2 * Math.sin (2 * Math.PI * (fraction -   waveStep));
   value4 = 0.2 * Math.sin (2 * Math.PI * (fraction             ));
   value5 = 0.2 * Math.sin (2 * Math.PI * (fraction +   waveStep));
   value6 = 0.2 * Math.sin (2 * Math.PI * (fraction + 2*waveStep));
   value7 = 0.2 * Math.sin (2 * Math.PI * (fraction + 3*waveStep));
   value8 = 0.2 * Math.sin (2 * Math.PI * (fraction + 4*waveStep));
   
   // setting the gridOutput value creates an output event that is connected via ROUTE to the ElevationGrid set_height field.
   // note that types match (MFFloat) and accessTypes also match (output_only connects to inputOnly).
   gridOutput = new MFFloat (
		value0, value1, value2, value3, value4, value5, value6, value7, value8,
		value0, value1, value2, value3, value4, value5, value6, value7, value8,
		value0, value1, value2, value3, value4, value5, value6, value7, value8 );
}

    
" ]
}
ROUTE Clock.fraction_changed TO WaveGenerationScript.newInputValue
ROUTE WaveGenerationScript.gridOutput TO GridSurface.set_height
