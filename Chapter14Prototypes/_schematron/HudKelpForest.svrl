<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<svrl:schematron-output xmlns:xs="http://www.w3.org/2001/XMLSchema"
                        xmlns:schold="http://www.ascc.net/xml/schematron"
                        xmlns:iso="http://purl.oclc.org/dsdl/schematron"
                        xmlns:xhtml="http://www.w3.org/1999/xhtml"
                        xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                        title="X3D Graphics Validity Checks using Schematron"
                        schemaVersion=""><!--   
		   
		   
		 --><svrl:active-pattern document="file:/C:/x3d-code/www.web3d.org/x3d/content/examples/X3dForWebAuthors/Chapter14Prototypes/HudKelpForest.x3d"/>
   <svrl:fired-rule context="X3D | *[(upper-case(local-name()) = 'X3D')]"/>
   <svrl:successful-report test="$profileLegal and (//Inline[not(MetadataString)][not(@USE)]) and not($fullProfile)"
                           role="info"
                           location="/X3D">
      <svrl:text>&lt;X3D profile='Immersive'&gt; is defined satisfactorily for this scene, but ensure that child Inline scenes do not exceed this profile/component combination since a parent scene must have an equal or higher profile/component combination </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="head | *[(lower-case(local-name()) = 'head')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="Scene | *[(lower-case(local-name()) = 'scene')]"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="Background"/>
   <svrl:fired-rule context="Switch"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Script"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="Inline"/>
</svrl:schematron-output>