#VRML V2.0 utf8
# X3D-to-VRML-97 XSL translation autogenerated by X3dToVrml97.xslt
# https://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: Saxonica

# [X3D] VRML V3.3 utf8
# PROFILE Immersive
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=https://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

# META "title" "MaterialModulator.x3d"
# META "description" "Mimic a Material node and modulate the diffuseColor field as an animation effect, provided as a prototype for reusability."
# META "hint" "Learning suggestion for authors: try changing the modulation script so that it goes from [0 ... 1] and then [1 ... 0] alternating, rather than abruptly shifting from 1 immediately back to 0."
# META "creator" "Don Brutzman"
# META "created" "10 March 2008"
# META "modified" "20 October 2019"
# META "subject" "X3D prototype requiring Script inputOutput fields"
# META "Image" "MaterialModulator.png"
# META "identifier" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulator.x3d"
# META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
# META "license" "../license.html"


EXTERNPROTO BooleanToggle [
  # [appinfo] Negate or reset prior boolean state, output result.
  eventIn  SFBool set_boolean    # [appinfo] If set_boolean input is true, toggle state.
  eventIn  SFBool set_toggle
  field    SFBool toggle         # [appinfo] Persistent state value that gets toggled or reset.
  eventOut SFBool toggle_changed
][
      "EventUtilityPrototypes.wrl#BooleanToggle"
"https://www.web3d.org/x3d/content/examples/Basic/development/EventUtilityPrototypes.wrl#BooleanToggle"
      "EventUtilityPrototypes.x3d#BooleanToggle"
"https://www.web3d.org/x3d/content/examples/Basic/development/EventUtilityPrototypes.x3d#BooleanToggle"
 ]

    
# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

WorldInfo {
  title "MaterialModulator.x3d"
}
PROTO MaterialModulator [
  # [appinfo] mimic a Material node and modulate the diffuseColor field as an animation effect


 # documentation: https://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html

  exposedField SFBool	enabled TRUE    # [appinfo] default value true

  exposedField SFColor	diffuseColor 0.8 0.8 0.8    # [appinfo] default value 0.8 0.8 0.8

  exposedField SFColor	emissiveColor 0 0 0    # [appinfo] default value 0 0 0

  exposedField SFColor	specularColor 0 0 0    # [appinfo] default value 0 0 0

  exposedField SFFloat	transparency 0.0    # [appinfo] default value 0.0

  exposedField SFFloat	shininess 0.2    # [appinfo] default value 0.2

  exposedField SFFloat	ambientIntensity 0.2    # [appinfo] default value 0.2

] {
  DEF MaterialNode Material {
          diffuseColor IS diffuseColor
      emissiveColor IS emissiveColor
      specularColor IS specularColor
      transparency IS transparency
      shininess IS shininess
      ambientIntensity IS ambientIntensity
  }
  DEF MaterialModulatorScript Script {
     ### Warning:  Script field 'enabled' has accessType 'inputOutput' (exposedField), which is only allowed in X3D Script node, not VRML97 Script node. Using exposedField anyway, may cause errors.
exposedField  SFBool	enabled IS enabled
     ### Warning:  Script field 'diffuseColor' has accessType 'inputOutput' (exposedField), which is only allowed in X3D Script node, not VRML97 Script node. Using exposedField anyway, may cause errors.
exposedField  SFColor	diffuseColor IS diffuseColor
    eventOut     SFColor	newColor
    eventIn      SFTime	clockTrigger
                
	url [ "javascript: // ### X3D Browser.print() not supported by all VRML97 viewers, instead simply using print()

function initialize ()
{
    newColor = diffuseColor; // start with original color
}
function clockTrigger (timeValue)
{
    if (!enabled) return;
    red   = newColor.r;
    green = newColor.g;
    blue  = newColor.b;
    
    // note different modulation rates for each color component, % is modulus operator
    newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1);
	if (enabled)
	{
		printing ('diffuseColor=(' + red +',' + green + ',' + blue + ') newColor=' + newColor.toString() + '\n');
	}
}
function set_enabled (newValue)
{
	enabled = newValue;
}

        
" ]
  }
  ROUTE MaterialModulatorScript.newColor TO MaterialNode.diffuseColor
  DEF ModulationClock TimeSensor {
    cycleInterval 0.1
    loop TRUE
          enabled IS enabled
  }
  ROUTE ModulationClock.cycleTime TO MaterialModulatorScript.clockTrigger
}
# Rendered geometry for the ProtoInstance now follows prototype declaration
Transform {
  translation 0 1 0
  children [
      Shape {
        geometry Sphere {
        }
        appearance Appearance {
          material DEF MaterialModulatorInstance  MaterialModulator {
            enabled  TRUE
            diffuseColor  0.5 0.1 0.1
          }
        }
      }
  ]
}
# Selectable Text design pattern has transparent Box and TouchSensor description as a tooltip
Transform {
  translation 0 -2 0
  children [
      Shape {
        geometry Text {
          string [ "enable/disable" "MaterialModulator" ]
          fontStyle FontStyle {
            family [ "SANS"  ] 
            justify [ "MIDDLE" "MIDDLE"  ] 
            ### style='BOLD'
          }
        }
        appearance Appearance {
          material Material {
            diffuseColor 0.9 0.9 0.9
          }
        }
      }
      Shape {
        geometry Box {
          size 8 2 .001
        }
        appearance Appearance {
          material Material {
            transparency 1
          }
        }
      }
      # Toggle text to enable/disable MaterialModulator
      DEF TouchTextInterface TouchSensor {
         # description "Select to enable/disable MaterialModulator"
      }
      DEF EventToggler BooleanToggle {
      }
  ]
ROUTE TouchTextInterface.isActive TO EventToggler.set_boolean
ROUTE EventToggler.toggle TO MaterialModulatorInstance.enabled
}
