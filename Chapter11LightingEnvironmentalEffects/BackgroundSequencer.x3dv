#X3D V3.3 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# https://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: Saxonica

PROFILE Immersive
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=https://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

META "title" "BackgroundSequencer.x3d"
META "description" "Cycle through four Background nodes to show a time-of-day effect."
META "creator" "Dale Tourtelotte, Don Brutzman and MV4205 class"
META "created" "20 April 2009"
META "modified" "20 October 2019"
META "reference" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter11LightingEnvironmentalEffects/BackgroundColorsOnly.x3d"
META "subject" "X3D Background example"
META "identifier" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter11LightingEnvironmentalEffects/BackgroundSequencer.x3d"
META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
META "license" "../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

WorldInfo {
  title "BackgroundSequencer.x3d"
}
Transform {
  translation 0 3 0
  children [
      Shape {
        geometry Text {
          string [ "Background Sequencer" ]
          fontStyle FontStyle {
            justify [ "MIDDLE" "MIDDLE"  ] 
          }
        }
        appearance Appearance {
          material Material {
          }
        }
      }
  ]
}
DEF TimeOfDayClock TimeSensor {
  cycleInterval 12
  loop TRUE
}
DEF BackgroundSequencer IntegerSequencer {
  key [ 0 0.25 0.5 0.75 1 ]
  keyValue [ 0 1 2 3 0 ]
}
ROUTE TimeOfDayClock.fraction_changed TO BackgroundSequencer.set_fraction
DEF SelectorScript Script {
  inputOnly      SFInt32	whichBackground
  inputOutput    SFInt32	currentBackground -1
  outputOnly     SFBool	bind0
  outputOnly     SFBool	bind1
  outputOnly     SFBool	bind2
  outputOnly     SFBool	bind3

	url [ "ecmascript: // ### X3D Browser.print() not supported by all VRML97 viewers, instead simply using print()

function whichBackground (inputValue)
{
    if (currentBackground == inputValue)
        return; // avoid rapid Background binding (probably overcautious)
    currentBackground = inputValue; // remember state
    Browser.println (\"currentBackground=\" + currentBackground);
    if      (inputValue == 0) bind0 = true; // send event
    else if (inputValue == 1) bind1 = true; // send event
    else if (inputValue == 2) bind2 = true; // send event
    else if (inputValue == 3) bind3 = true; // send event
}

    
" ]
}
ROUTE BackgroundSequencer.value_changed TO SelectorScript.whichBackground
DEF SunRiseSky Background {
  groundAngle [ 0.75 1.2 1.25 1.26 1.5 1.57 ]
  groundColor [ 0.133333 0.419608 0 0.36 0.1 0 1 0.74 0.4 1 0.74 0.4 0 0 0.5 0 0 0.2 0 0.231373 0.380392 ]
  skyAngle [ 0.5 0.7 1.35 1.45 1.57 ]
  skyColor [ 0 0.035 0.34 0 0.015 0.44 0 0.05 0.5 0 0.1 0.6 0.44 0.8 1 1 1 0.7 ]
}
DEF HighNoonSky Background {
  groundAngle [ 0.75 1.2 1.25 1.26 1.57 ]
  groundColor [ 0.133333 0.419608 0 0.36 0.1 0 1 0.74 0.4 1 0.74 0.4 0 0.2 0.75 0 0.1 0.5 ]
  skyAngle [ 0.05 0.07 1.57 ]
  skyColor [ 1 1 0.2 1 1 0 0.36 0.63 1 0 0.4 1 ]
}
DEF SunsetSky Background {
  groundAngle [ 0.75 1.2 1.25 1.26 1.57 ]
  groundColor [ 0.133333 0.419608 0 0.36 0.1 0 1 0.74 0.4 1 0.74 0.4 0 0 0.5 0 0 0.2 ]
  skyAngle [ 0.5 0.7 1.2 1.4 1.57 ]
  skyColor [ 0 0 0.38 0 0 0.68 0.5 0.2 1 0.5 0.2 1 1 0.3 0 1 0.2 0.8 ]
}
DEF NightSky Background {
  groundAngle [ 0.75 1.2 1.25 1.26 1.57 ]
  groundColor [ 0.133333 0.419608 0 0.36 0.1 0 1 0.74 0.4 1 0.74 0.4 0 0 0.5 0 0 0.2 ]
  skyAngle [ 0.03 0.05 1.57 ]
  skyColor [ 1 1 1 0.8 0.8 0.8 0.1 0.1 0.1 0 0 0 ]
}
ROUTE SelectorScript.bind0 TO SunRiseSky.set_bind
ROUTE SelectorScript.bind1 TO HighNoonSky.set_bind
ROUTE SelectorScript.bind2 TO SunsetSky.set_bind
ROUTE SelectorScript.bind3 TO NightSky.set_bind
