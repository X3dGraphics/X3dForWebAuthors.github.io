#X3D V3.3 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# https://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: Saxonica

PROFILE Interchange
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=https://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

META "title" "NormalInterpolatorExample.x3d"
META "description" "Example normal (perpendicular vector) animation, where orange vectors show normal direction at each polygon vertex."
META "creator" "Don Brutzman"
META "created" "3 May 2008"
META "modified" "14 June 2020"
META "reference" "https://www.web3d.org/x3d/content/examples/Vrml2Sourcebook/Chapter19-NormalsShading/Figure19.27SquareFaceAnimatingNormals.x3d"
META "subject" "X3D NormalInterpolator example"
META "identifier" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter07EventAnimationInterpolation/NormalInterpolatorExample.x3d"
META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
META "license" "../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

WorldInfo {
  title "NormalInterpolator.x3d"
}
Viewpoint {
  description "Animating normals on right vertices of a quadrilateral"
  position 0 0 8
}
Viewpoint {
  description "Other side - note difference in animated shading"
  orientation 0 1 0 3.14159
  position 0 0 -7
}
Shape {
  geometry DEF FlatSquare IndexedFaceSet {
    coordIndex [ 0 1 2 3 ]
    normalIndex [ 0 1 2 3 ]
    solid FALSE
    coord Coordinate {
      point [ -2 -2 0 2 -2 0 2 2 0 -2 2 0 ]
    }
    normal DEF AnimatedNormalNode Normal {
      vector [ 0 0 1 0 0 1 0 0 1 0 0 1 ]
    }
  }
  appearance Appearance {
    material DEF LightBlue Material {
      diffuseColor 0.3 0.6 0.9
    }
  }
}
# NormalInterpolator keyValue array must match sizes of target Normal vector and key arrays
# Thus this keyValue array has 4 * 3 = 12 total SFVec3f triplet values
DEF NormalPath NormalInterpolator {
  key [ 0 0.5 1 ]
  keyValue [ 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 ]
}
ROUTE NormalPath.value_changed TO AnimatedNormalNode.set_vector
DEF Clock TimeSensor {
  cycleInterval 8
  loop TRUE
}
ROUTE Clock.fraction_changed TO NormalPath.set_fraction
# This block above completes the primary functionality of this scene. More to follow, however!
# ==============================================================================================================
# Note that a Normal is not rendered - it is invisible. So this scene adds some lines to visualize what is happening.
Shape {
  geometry IndexedLineSet {
    coordIndex [ 0 1 -1 2 3 -1 4 5 -1 6 7 -1 ]
    coord DEF NormalVectors Coordinate {
      point [ -2 -2 0 -2 -2 1 2 -2 0 2 -2 1 2 2 0 2 2 1 -2 2 0 -2 2 1 ]
    }
  }
  appearance Appearance {
    material Material {
      emissiveColor 0.9 0.6 0.1
    }
  }
}
DEF NormalVectorsAnimation CoordinateInterpolator {
  key [ 0 0.5 1 ]
  keyValue [ -2 -2 0 -2 -2 1 2 -2 0 2 -2 1 2 2 0 2 2 1 -2 2 0 -2 2 1 -2 -2 0 -2 -2 1 2 -2 0 3 -2 0 2 2 0 3 2 0 -2 2 0 -2 2 1 -2 -2 0 -2 -2 1 2 -2 0 2 -2 1 2 2 0 2 2 1 -2 2 0 -2 2 1 ]
}
ROUTE NormalVectorsAnimation.value_changed TO NormalVectors.point
ROUTE Clock.fraction_changed TO NormalVectorsAnimation.set_fraction
