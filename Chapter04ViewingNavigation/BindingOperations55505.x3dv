#X3D V3.1 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 8.7 from Saxonica

PROFILE Immersive
# [X3D] version=3.1
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.1.xsd
# [head]

META "title" "BindingOperations.x3d"
META "description" "Illustrate Viewpoint binding operations as described in Chapter 4 concepts. Display the browser console to see an event"
META "creator" "Don Brutzman"
META "created" "5 January 2008"
META "modified" "16 February 2008"
META "reference" "BindingOperations.console.txt"
META "reference" "BindingStackOperations.png"
META "reference" "X3D for Web Authors, Section 2.5.1, Figure 4.1"
META "reference" "http://X3dGraphics.com"
META "reference" "http://www.web3d.org/x3d/content/examples/X3dResources.html"
META "rights" "Copyright Don Brutzman and Leonard Daly 2007"
META "subject" "X3D book, X3D graphics, X3D-Edit, http://www.x3dGraphics.com"
META "identifier" "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter04-ViewingNavigation/BindingOperations.x3d"
META "generator" "X3D-Edit, https://savage.nps.edu/X3D-Edit"
META "license" "../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

DEF View1 Viewpoint {
  centerOfRotation -6 0 0
  description "Viewpoint 1"
  position -6 0 5
}
DEF View2 Viewpoint {
  centerOfRotation -2 0 0
  description "Viewpoint 2"
  position -2 0 5
}
DEF View3 Viewpoint {
  centerOfRotation 2 0 0
  description "Viewpoint 3"
  position 2 0 5
}
DEF View4 Viewpoint {
  centerOfRotation 6 0 0
  description "Viewpoint 4"
  position 6 0 5
}
Group {
  children [
      DEF Text1 Transform {
        translation -6 0 0
        children [
            Shape {
              geometry Text {
                string [ "View" "# 1" ]
                fontStyle DEF CenterJustify FontStyle {
                  justify [ "MIDDLE" "MIDDLE"  ] 
                }
              }
              appearance Appearance {
                material Material {
                  diffuseColor 1 0 0
                }
              }
            }
        ]
      }
      DEF Text2 Transform {
        translation -2 0 0
        children [
            Shape {
              geometry Text {
                string [ "View" "# 2" ]
                fontStyle USE CenterJustify
              }
              appearance Appearance {
                material Material {
                  diffuseColor 0 1 0
                }
              }
            }
        ]
      }
      DEF Text3 Transform {
        translation 2 0 0
        children [
            Shape {
              geometry Text {
                string [ "View" "# 3" ]
                fontStyle USE CenterJustify
              }
              appearance Appearance {
                material Material {
                  diffuseColor 0 0 1
                }
              }
            }
        ]
      }
      DEF Text4 Transform {
        translation 6 0 0
        children [
            Shape {
              geometry Text {
                string [ "View" "# 4" ]
                fontStyle USE CenterJustify
              }
            }
        ]
      }
  ]
}
# The following advanced animation sequence uses nodes covered in Chapters 7, 8 and 9.
# It does not need to be studied in this chapter.
Transform {
  translation 0 -3 8
  children [
      # notice this next Viewpoint has been transformed with the text, so its position is relative
      DEF ClickToAnimateView Viewpoint {
        description "Select animation sequence"
        fieldOfView 0.785
        position 0 0 7
      }
      Shape {
        geometry Text {
          string [ "Click here to animate" ]
          fontStyle FontStyle {
            justify [ "MIDDLE" "BEGIN"  ] 
          }
        }
        appearance Appearance {
          material Material {
            diffuseColor 0.8 0.4 0
          }
        }
      }
      Shape {
        geometry Box {
          size 7 1 0.02
        }
        appearance Appearance {
          material Material {
            transparency 1
          }
        }
      }
      DEF TextTouchSensor TouchSensor {
        description "Click to begin animating viewpoint selections"
      }
      DEF Clock TimeSensor {
        cycleInterval 10
      }
      DEF TimingSequencer IntegerSequencer {
        key [ 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 1.0 ]
        keyValue [ 0 1 2 3 4 5 6 7 8 10 ]
      }
      DEF BindingSequencerEngine Script {
        inputOnly      SFInt32	set_timeEvent
        outputOnly     SFBool	bindView1
        outputOnly     SFBool	bindView2
        outputOnly     SFBool	bindView3
        outputOnly     SFBool	bindView4
        outputOnly     SFBool	bindView5
        inputOnly      SFBool	view1Bound
        inputOnly      SFBool	view2Bound
        inputOnly      SFBool	view3Bound
        inputOnly      SFBool	view4Bound
        initializeOnly SFInt32	priorInputvalue -1

	url [ "ecmascript:
// ### X3D Browser.print() not supported by all VRML97 viewers, instead simply use print()


function initialize ()
{
    bindView5 = true;
    Browser.print ('initialized and ready for activation');
}
function set_timeEvent (inputValue)
{
    if (inputValue == priorInputvalue)
    {
        return; // ignore repeated inputs
    }
    // new value provided
    priorInputvalue = inputValue;
    // Browser.print ('\ntimeEvent inputValue=' + inputValue);
        
    // mimics user execution of Figure 4.1 steps t_0 through t_8
    switch (inputValue) 
    {
        case 0:
        {
            Browser.print ('\n===========\n time t0');
            bindView1 = true;
            break;
        }
        case 1:
        {
            Browser.print ('\n===========\n time t1');
            bindView2 = true;
            break;
        }
        case 2:
        {
            Browser.print ('\n===========\n time t2');
            bindView3 = true;
            break;
        }
        case 3:
        {
            Browser.print ('\n===========\n time t3');
            bindView3 = false;
            break;
        }
        case 4:
        {
            Browser.print ('\n===========\n time t4');
            bindView1 = true;
            break;
        }
        case 5:
        {
            Browser.print ('\n===========\n time t5');
            bindView2 = false;
            break;
        }
        case 6:
        {
            Browser.print ('\n===========\n time t6');
            bindView1 = false;
            break;
        }
        case 7:
        {
            Browser.print ('\n===========\n time t7');
            bindView4 = true;
            break;

        }
        case 8:
        {
            Browser.print ('\n===========\n time t8');
            Browser.print (', no action, all done');
            Browser.print ('\n\n');
            break;
        }
    }
}

function view1Bound (inputValue)
{
    Browser.print (', view1Bound ' + (inputValue));
    if (priorInputvalue == -1) Browser.print ('\n');
}
function view2Bound (inputValue)
{
    Browser.print (', view2Bound ' + (inputValue));
}
function view3Bound (inputValue)
{
    Browser.print (', view3Bound ' + (inputValue));
}
function view4Bound (inputValue)
{
    Browser.print (', view4Bound ' + (inputValue));
}
function view5Bound (inputValue)
{
    Browser.print (', view5Bound ' + (inputValue));
}

      
" ]
      }
      # drive Script with TimeSensor clock
      # Script will bind and unbind Viewpoint nodes
      # Viewpoint nodes report bind and unbind events
  ]
ROUTE TextTouchSensor.touchTime TO Clock.set_startTime
ROUTE Clock.fraction_changed TO TimingSequencer.set_fraction
ROUTE TimingSequencer.value_changed TO BindingSequencerEngine.set_timeEvent
ROUTE BindingSequencerEngine.bindView1 TO View1.set_bind
ROUTE BindingSequencerEngine.bindView2 TO View2.set_bind
ROUTE BindingSequencerEngine.bindView3 TO View3.set_bind
ROUTE BindingSequencerEngine.bindView4 TO View4.set_bind
ROUTE BindingSequencerEngine.bindView5 TO ClickToAnimateView.set_bind
ROUTE View1.isBound TO BindingSequencerEngine.view1Bound
ROUTE View2.isBound TO BindingSequencerEngine.view2Bound
ROUTE View3.isBound TO BindingSequencerEngine.view3Bound
ROUTE View4.isBound TO BindingSequencerEngine.view4Bound
}
