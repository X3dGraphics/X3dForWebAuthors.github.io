#VRML V2.0 utf8
# X3D-to-VRML-97 XSL translation autogenerated by X3dToVrml97.xslt
# https://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: Saxonica

# [X3D] VRML V3.3 utf8
# PROFILE Immersive
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=https://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

# META "title" "BindingOperations.x3d"
# META "description" "Illustrate Viewpoint binding operations (in gory detail!) as described in Chapter 4 concepts. Scene design: a TimeSensor clock drives and IntegerSequencer for each t0/t1/etc. event, and a customized Script node sends bind/unbind events to the correct Viewpoint. Display the browser console to see occurrence of each event."
# META "creator" "Don Brutzman"
# META "created" "5 January 2008"
# META "modified" "20 October 2019"
# META "reference" "BindingOperations.console.txt"
# META "reference" "BindingStackOperations.png"
# META "reference" "X3D for Web Authors, Section 2.5.1, Figure 4.1"
# META "reference" "https://X3dGraphics.com"
# META "reference" "https://www.web3d.org/x3d/content/examples/X3dResources.html"
# META "rights" "Copyright Don Brutzman and Leonard Daly 2007"
# META "subject" "X3D book, X3D graphics, X3D-Edit, http://www.x3dGraphics.com"
# META "identifier" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter04ViewingNavigation/BindingOperations.x3d"
# META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
# META "license" "../license.html"


EXTERNPROTO IntegerSequencer [
  # Regular interpolator-style input
  eventIn      SFFloat	set_fraction	# [appinfo] typically range [0..1]
  eventIn      MFFloat	set_key
  exposedField MFFloat	key		# [appinfo] Array sequentially increasing, typically [0..1].  Must have the same number of keys as keyValues.
  eventOut     MFFloat	key_changed
  ### When Script node supports exposedField, then it would be better to change keyValue to exposedField.
  eventIn      MFInt32	set_keyValue
  field        MFInt32	keyValue	# [appinfo] Array of integer values.  Must have the same number of keys as keyValues.
  eventOut     MFInt32	keyValue_changed
  # Regular interpolator-style output
  eventOut     SFInt32	value_changed
  # Utility methods
  eventIn      SFBool	previous
  eventIn      SFBool	next
][
      "IntegerSequencerPrototype.wrl#IntegerSequencer"
"https://www.web3d.org/x3d/content/examples/Basic/development/IntegerSequencerPrototype.wrl#IntegerSequencer"
      "IntegerSequencerPrototype.x3d#IntegerSequencer"
"https://www.web3d.org/x3d/content/examples/Basic/development/IntegerSequencerPrototype.x3d#IntegerSequencer"
 ]

    
# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

WorldInfo {
  title "BindingOperations.x3d"
}
DEF View1 Viewpoint {
  centerOfRotation -6 0 0
  description "Viewpoint 1"
  position -6 0 5
}
DEF View2 Viewpoint {
  centerOfRotation -2 0 0
  description "Viewpoint 2"
  position -2 0 5
}
DEF View3 Viewpoint {
  centerOfRotation 2 0 0
  description "Viewpoint 3"
  position 2 0 5
}
DEF View4 Viewpoint {
  centerOfRotation 6 0 0
  description "Viewpoint 4"
  position 6 0 5
}
# Script initialization ought to first bind view5 below.
Group {
  children [
      DEF Text1 Transform {
        translation -6 0 0
        children [
            Shape {
              geometry Text {
                string [ "View" "# 1" ]
                fontStyle DEF CenterJustify FontStyle {
                  justify [ "MIDDLE" "MIDDLE"  ] 
                }
              }
              appearance Appearance {
                material Material {
                  diffuseColor 1 0 0
                }
              }
            }
        ]
      }
      DEF Text2 Transform {
        translation -2 0 0
        children [
            Shape {
              geometry Text {
                string [ "View" "# 2" ]
                fontStyle USE CenterJustify
              }
              appearance Appearance {
                material Material {
                  diffuseColor 0 1 0
                }
              }
            }
        ]
      }
      DEF Text3 Transform {
        translation 2 0 0
        children [
            Shape {
              geometry Text {
                string [ "View" "# 3" ]
                fontStyle USE CenterJustify
              }
              appearance Appearance {
                material Material {
                  diffuseColor 0 0 1
                }
              }
            }
        ]
      }
      DEF Text4 Transform {
        translation 6 0 0
        children [
            Shape {
              geometry Text {
                string [ "View" "# 4" ]
                fontStyle USE CenterJustify
              }
              appearance Appearance {
                material Material {
                }
              }
            }
        ]
      }
  ]
}
# The following advanced animation sequence uses nodes covered in Chapters 7, 8 and 9.
# It does not need to be studied in this chapter.
Transform {
  translation 0 -3 8
  children [
      # notice this next Viewpoint has been transformed with the text, so its position is relative. it is called view5 in the Script.
      DEF ClickToAnimateView Viewpoint {
        description "Select animation sequence"
        position 0 0 7
      }
      Shape {
        geometry Text {
          string [ "Click here to animate" ]
          fontStyle FontStyle {
            justify [ "MIDDLE" "BEGIN"  ] 
          }
        }
        appearance Appearance {
          material Material {
            diffuseColor 0.8 0.4 0
          }
        }
      }
      Shape {
        geometry Box {
          size 7 1 0.02
        }
        appearance Appearance {
          material Material {
            transparency 1
          }
        }
      }
      DEF TextTouchSensor TouchSensor {
         # description "Click to begin animating viewpoint selections"
      }
      DEF Clock TimeSensor {
        cycleInterval 10
      }
      DEF TimingSequencer IntegerSequencer {
        key [ 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 1.0 ]
        keyValue [ 0 1 2 3 4 5 6 7 8 10 ]
      }
      DEF BindingSequencerEngine Script {
        eventIn      SFInt32	set_timeEvent
        eventOut     SFBool	bindView1
        eventOut     SFBool	bindView2
        eventOut     SFBool	bindView3
        eventOut     SFBool	bindView4
        eventOut     SFBool	bindView5
        eventIn      SFBool	view1Bound
        eventIn      SFBool	view2Bound
        eventIn      SFBool	view3Bound
        eventIn      SFBool	view4Bound
        field        SFInt32	priorInputvalue -1

	url [ "javascript: // ### X3D Browser.print() not supported by all VRML97 viewers, instead simply using print()


function initialize ()
{
    bindView5 = true;
    printing ('Timing script initialized and ready for activation');
}
function set_timeEvent (inputValue)
{
    if (inputValue == priorInputvalue)
    {
        return; // ignore repeated inputs
    }
    // new value provided
    priorInputvalue = inputValue;
    // printing ('\ntimeEvent inputValue=' + inputValue);
        
    // mimics user execution of Figure 4.1 steps t_0 through t_8
    if (inputValue == 0)
    {
        printing ('\n===========\n time t0');
        bindView1 = true;
    }
    else if (inputValue == 1)
    {
        printing ('\n===========\n time t1');
        bindView2 = true;
    }
    else if (inputValue == 2)
    {
        printing ('\n===========\n time t2');
        bindView3 = true;
    }
    else if (inputValue == 3)
    {
        printing ('\n===========\n time t3');
        bindView3 = false;
    }
    else if (inputValue == 4)
    {
        printing ('\n===========\n time t4');
        bindView1 = true;
    }
    else if (inputValue == 5)
    {
        printing ('\n===========\n time t5');
        bindView2 = false;
    }
    else if (inputValue == 6)
    {
        printing ('\n===========\n time t6');
        bindView1 = false;
    }
    else if (inputValue == 7)
    {
        printing ('\n===========\n time t7');
        bindView4 = true;

    }
    else if (inputValue == 8)
    {
        printing ('\n===========\n time t8');
        printing (', no action, all done');
        printing ('\n\n');
    }
}

function view1Bound (inputValue)
{
    printing (', view1Bound ' + (inputValue));
    if (priorInputvalue == -1) printing ('\n');
}
function view2Bound (inputValue)
{
    printing (', view2Bound ' + (inputValue));
}
function view3Bound (inputValue)
{
    printing (', view3Bound ' + (inputValue));
}
function view4Bound (inputValue)
{
    printing (', view4Bound ' + (inputValue));
}
function view5Bound (inputValue)
{
    printing (', view5Bound ' + (inputValue));
}

      
" ]
      }
      # drive Script with TimeSensor clock
      # Script will bind and unbind Viewpoint nodes
      # Viewpoint nodes report bind and unbind events
  ]
ROUTE TextTouchSensor.touchTime TO Clock.set_startTime
ROUTE Clock.fraction_changed TO TimingSequencer.set_fraction
ROUTE TimingSequencer.value_changed TO BindingSequencerEngine.set_timeEvent
ROUTE BindingSequencerEngine.bindView1 TO View1.set_bind
ROUTE BindingSequencerEngine.bindView2 TO View2.set_bind
ROUTE BindingSequencerEngine.bindView3 TO View3.set_bind
ROUTE BindingSequencerEngine.bindView4 TO View4.set_bind
ROUTE BindingSequencerEngine.bindView5 TO ClickToAnimateView.set_bind
ROUTE View1.isBound TO BindingSequencerEngine.view1Bound
ROUTE View2.isBound TO BindingSequencerEngine.view2Bound
ROUTE View3.isBound TO BindingSequencerEngine.view3Bound
ROUTE View4.isBound TO BindingSequencerEngine.view4Bound
}
