#VRML V2.0 utf8
# X3D-to-VRML-97 XSL translation autogenerated by X3dToVrml97.xslt
# https://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: Saxonica

# [X3D] VRML V3.3 utf8
# PROFILE Immersive
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=https://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

# META "title" "UserInteractivitySensorNodes.x3d"
# META "description" "A collection of all of the user interactivity sensor nodes: TouchSensor, PlaceSensor, CylinderSensor, SphereSensor, KeySensor, and StringSensor."
# META "creator" "Don Brutzman"
# META "created" "30 April 2005"
# META "modified" "20 October 2019"
# META "rights" "Copyright 2006, Daly Realism and Don Brutzman"
# META "Image" "UserInteractivitySensorNodes.png"
# META "Image" "UserInteractivitySensorNodesModified.png"
# META "identifier" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter08UserInteractivity/UserInteractivitySensorNodes.x3d"
# META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
# META "license" "../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

WorldInfo {
  title "UserInteractivitySensorNodes.x3d"
}
Viewpoint {
  description "User interactivity sensor nodes"
  position 0 0 12
}
DEF BackgroundDefault Background {
  groundColor [ 0.2 0.4 0.6 ]
  skyColor [ 0.2 0.4 0.6 ]
}
DEF BackgroundTouchCone Background {
  skyColor [ 0.5 0.7 0.9 ]
}
Transform {
  translation 0 4 0
  children [
      Shape {
        geometry Text {
          string [ "Sensor node examples" ]
          fontStyle FontStyle {
            justify [ "MIDDLE" "MIDDLE"  ] 
            size 1.5
          }
        }
        appearance Appearance {
          material DEF DefaultMaterial Material {
            diffuseColor 0.8 0.6 0.4
          }
        }
      }
  ]
}
Transform {
  translation 0 1 0
  children [
      Transform {
        translation -6 0 0
        children [
            DEF DefaultTouchSensor TouchSensor {
               # description "click to activate TouchSensor bind alternate Background"
            }
            Shape {
              geometry Cone {
              }
              appearance DEF RedAppearance Appearance {
                material Material {
                  diffuseColor 1 0.2 0.2
                }
              }
            }
            Transform {
              translation 0 -2 0
              children [
                  Shape {
                    geometry Text {
                      string [ "Touch" "Sensor" ]
                      fontStyle DEF JustifyMiddle FontStyle {
                        justify [ "MIDDLE" "MIDDLE"  ] 
                      }
                    }
                    appearance USE RedAppearance
                  }
              ]
            }
        ]
      ROUTE DefaultTouchSensor.isActive TO BackgroundTouchCone.set_bind
      }
      DEF TransformBox Transform {
        translation -2 0 0
        children [
            DEF DefaultPlaneSensor PlaneSensor {
               # description "drag Box to activate PlaneSensor"
            }
            Shape {
              geometry Box {
              }
              appearance DEF GreenAppearance Appearance {
                material Material {
                  diffuseColor 0.2 1 0.2
                }
              }
            }
            Transform {
              translation 0 -2 0
              children [
                  Shape {
                    geometry Text {
                      string [ "Plane" "Sensor" ]
                      fontStyle USE JustifyMiddle
                    }
                    appearance USE GreenAppearance
                  }
              ]
            }
        ]
      ROUTE DefaultPlaneSensor.offset TO TransformBox.set_translation
      }
      DEF TransformCylinder Transform {
        translation 2 0 0
        children [
            DEF DefaultCylinderSensor CylinderSensor {
               # description "drag to activate CylinderSensor"
            }
            Shape {
              geometry Cylinder {
              }
              appearance Appearance {
                texture DEF ReferenceTexture ImageTexture {
                  url [ "../Chapter05AppearanceMaterialTextures/ImageTextureFigure18.1X3dSpecification.png" "../Chapter05AppearanceMaterialTextures/ImageTextureFigure18.1X3dSpecification.gif" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter05AppearanceMaterialTextures/ImageTextureFigure18.1X3dSpecification.png" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter05AppearanceMaterialTextures/ImageTextureFigure18.1X3dSpecification.gif" ]
                }
                material DEF DarkBlue Material {
                  diffuseColor 0 0 0.9
                }
              }
            }
            Transform {
              translation 0 -2 0
              children [
                  Shape {
                    geometry Text {
                      string [ "Cylinder" "Sensor" ]
                      fontStyle USE JustifyMiddle
                    }
                    appearance Appearance {
                      material USE DarkBlue
                    }
                  }
              ]
            }
        ]
      ROUTE DefaultCylinderSensor.rotation_changed TO TransformCylinder.set_rotation
      }
      DEF TransformSphere Transform {
        translation 6 0 0
        children [
            DEF DefaultSphereSensor SphereSensor {
               # description "click to activate SphereSensor"
            }
            Shape {
              geometry Sphere {
              }
              appearance Appearance {
                texture USE ReferenceTexture
              }
            }
            DEF SphereSensorText Transform {
              translation 0 -2 0
              children [
                  Shape {
                    geometry Text {
                      string [ "Sphere" "Sensor" ]
                      fontStyle USE JustifyMiddle
                    }
                    appearance Appearance {
                      material DEF GreyMaterial Material {
                      }
                    }
                  }
              ]
            }
        ]
      ROUTE DefaultSphereSensor.rotation_changed TO TransformSphere.set_rotation
      }
  ]
}
Group {
  children [
      Transform {
        translation -4 -3 0
        children [
            Shape {
              geometry DEF KeyText Text {
                string [ "?" ]
                fontStyle USE JustifyMiddle
              }
              appearance DEF LightBrownAppearance Appearance {
                material Material {
                  diffuseColor 1 0.862745 0.141176
                }
              }
            }
        ]
      }
      Transform {
        translation -2 -3 0
        children [
            Shape {
              geometry DEF StringText Text {
                string [ "Press keys then <Enter>" ]
                fontStyle FontStyle {
                  justify [ "BEGIN" "MIDDLE"  ] 
                }
              }
              appearance USE LightBrownAppearance
            }
        ]
      }
      DEF DefaultKeySensor KeySensor {
      }
      DEF DefaultStringSensor StringSensor {
      }
      DEF KeyboardProcessor Script {
        eventIn      SFString	keyInput
        eventIn      SFString	finalTextInput
        eventIn      SFString	enteredTextInput
        eventOut     MFString	keyOutput
        eventOut     MFString	stringOutput

	url [ "javascript: // ### X3D Browser.print() not supported by all VRML97 viewers, instead simply using print()


function keyInput (inputValue)
{
//  printing ('keyInput=' + inputValue + '\n'); // console output
    keyOutput = new MFString (inputValue); // type conversion
}
function finalTextInput (inputValue)
{
//  printing ('finalText=' + inputValue + '\n'); // console output
    stringOutput = new MFString (inputValue); // type conversion
}
function enteredTextInput (inputValue)
{
    printing ('enteredText=' + inputValue + '\n'); // console output
}

      
" ]
      }
  ]
ROUTE DefaultKeySensor.keyPress TO KeyboardProcessor.keyInput
ROUTE DefaultStringSensor.finalText TO KeyboardProcessor.finalTextInput
ROUTE DefaultStringSensor.enteredText TO KeyboardProcessor.enteredTextInput
ROUTE KeyboardProcessor.keyOutput TO KeyText.string
ROUTE KeyboardProcessor.stringOutput TO StringText.string
}
