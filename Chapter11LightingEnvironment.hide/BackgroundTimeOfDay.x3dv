#X3D V3.2 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 8.7 from Saxonica

PROFILE Immersive
# [X3D] version=3.2
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.2.xsd
# [head]

META "title" "BackgroundTimeOfDay.x3d"
META "description" "Interpolate between Background color arrays to show a gradually changing time-of-day effect."
META "creator" "Don Brutzman and MV4205 class"
META "created" "22 April 2009"
META "modified" "23 April 2009"
META "reference" "http://x3dGraphics.com/examples/X3dForWebAuthors/Chapter11-LightingEnvironment/BackgroundSelector.x3d"
META "subject" "X3D Background example"
META "identifier" "http://x3dGraphics.com/examples/X3dForWebAuthors/Chapter11-LightingEnvironment/BackgroundTimeOfDay.x3d"
META "generator" "X3D-Edit, https://savage.nps.edu/X3D-Edit"
META "generator" "X3D-Edit, https://savage.nps.edu/X3D-Edit"
META "license" "../../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

Transform {
  translation 0 3 0
  children [
      Shape {
        geometry Text {
          string [ "Background Time Of Day" ]
          fontStyle FontStyle {
            justify [ "MIDDLE" "MIDDLE"  ] 
          }
        }
        appearance Appearance {
          material Material {
          }
        }
      }
  ]
}
DEF TimeOfDayClock TimeSensor {
  cycleInterval 6
  loop TRUE
}
DEF BackgroundColorInterpolator Script {
  inputOnly      SFFloat	set_fraction
  initializeOnly MFColor	groundColorSunrise [ 0.133 0.419 0 0.36 0.1 0 1 0.74 0.4 1 0.74 0.4 0 0.2 0.75 0 0.1 0.5 ]
  initializeOnly MFColor	groundColorNoon [ 0.133 0.419 0 0.36 0.1 0 1 0.74 0.4 1 0.74 0.4 0 0 0.5 0 0 0.2 ]
  initializeOnly MFColor	groundColorSunset [ 0.133 0.419 0 0.36 0.1 0 1 0.74 0.4 1 0.74 0.4 0 0 0.5 0 0 0.2 ]
  initializeOnly MFColor	groundColorNight [ 0.133 0.419 0 0.36 0.1 0 1 0.74 0.4 1 0.74 0.4 0 0 0.5 0 0 0.2 ]
  initializeOnly MFColor	skyColorSunrise [ 1 1 0.2 1 1 0 0.36 0.63 1 0 0.4 1 0 0.4 1 ]
  initializeOnly MFColor	skyColorNoon [ 0 0.035 0.34 0 0.015 0.44 0 0.05 0.5 0 0.1 0.6 0.44 0.8 1 1 1 0.7 ]
  initializeOnly MFColor	skyColorSunset [ 0 0 0.38 0 0 0.68 0.5 0.2 1 0.5 0.2 1 1 0.3 0 1 0.2 0.8 ]
  initializeOnly MFColor	skyColorNight [ 1 1 1 0.8 0.8 0.8 0.1 0.1 0.1 0 0 0 0 0 0 ]
  outputOnly     MFColor	groundColor_changed
  outputOnly     MFColor	skyColor_changed

	url [ "ecmascript:
// ### X3D Browser.print() not supported by all VRML97 viewers, instead simply use print()


function initialize()
{
    Browser.print ('groundColorSunrise length=' + groundColorSunrise.length + ' '  + groundColorSunrise.toString() + '\n');
    Browser.print ('groundColorNoon    length=' +    groundColorNoon.length +    ' '  + groundColorNoon.toString() + '\n');
    Browser.print ('groundColorSunset  length=' +  groundColorSunset.length +  ' '  + groundColorSunset.toString() + '\n');
    Browser.print ('groundColorNight   length=' +   groundColorNight.length +   ' '  + groundColorNight.toString() + '\n');
    Browser.print ('skyColorSunrise    length=' +    skyColorSunrise.length +    ' '  + skyColorSunrise.toString() + '\n');
    Browser.print ('skyColorNoon       length=' +       skyColorNoon.length +       ' '  + skyColorNoon.toString() + '\n');
    Browser.print ('skyColorSunset     length=' +     skyColorSunset.length +     ' '  + skyColorSunset.toString() + '\n');
    Browser.print ('skyColorNight      length=' +      skyColorNight.length +      ' '  + skyColorNight.toString() + '\n');
}
function set_fraction (fraction) // fraction is input value sent by TimeSensor clock
{
    // Sunrise to Noon, fraction 0.0 to 0.25, interval=0.25
    if      (fraction < 0.25)
    {
        groundColor_changed = interpolate (groundColorSunrise, groundColorNoon, fraction, 0.00, 0.25);
           skyColor_changed = interpolate (   skyColorSunrise,    skyColorNoon, fraction, 0.00, 0.25);
    }
    // Noon to Evening, fraction 0.25 to 0.5, interval=0.25
    else if (fraction < 0.5)
    {
        groundColor_changed = interpolate (groundColorNoon, groundColorSunset, fraction, 0.25, 0.25);
           skyColor_changed = interpolate (   skyColorNoon,    skyColorSunset, fraction, 0.25, 0.25);
    }
    // Evening to Night, fraction 0.5 to 0.6, interval=0.1
    else if (fraction < 0.6)
    {
        groundColor_changed = interpolate (groundColorSunset, groundColorNight, fraction, 0.5, 0.1);
           skyColor_changed = interpolate (   skyColorSunset,    skyColorNight, fraction, 0.5, 0.1);
    }
    // Night (unchanging), fraction 0.6 to 0.95, interval=0.35
    else if (fraction < 0.95)
    {
        groundColor_changed = groundColorNight;
           skyColor_changed = skyColorNight;
    }
    // Night to Sunrise, fraction 0.95 to 1.0, interval=0.05
    else // (fraction < 1.0)
    {
        groundColor_changed = interpolate (groundColorNight, groundColorSunrise, fraction, 0.95, 0.05);
           skyColor_changed = interpolate (   skyColorNight,    skyColorSunrise, fraction, 0.95, 0.05);
    }
//    Browser.print ('groundColor_changed=' + groundColor_changed.toString() + '\n');
//    Browser.print ('   skyColor_changed=' +    skyColor_changed.toString() + '\n');
}
function interpolate (firstColorArray, secondColorArray, fraction, initialFraction, interval)
{
    f = (fraction - initialFraction) / interval; // f should range from 0..1
//  Browser.print ('initialFraction=' + initialFraction + ', fraction=' + fraction + ', f=' + f + '\n');

    color0 = firstColorArray[0] + (secondColorArray[0] - firstColorArray[0]) * f;
    color1 = firstColorArray[1] + (secondColorArray[1] - firstColorArray[1]) * f;
    color2 = firstColorArray[2] + (secondColorArray[2] - firstColorArray[2]) * f;
    color3 = firstColorArray[3] + (secondColorArray[3] - firstColorArray[3]) * f;
    color4 = firstColorArray[4] + (secondColorArray[4] - firstColorArray[4]) * f;
    return new MFColor (color0, color1, color2, color3, color4);
}

    
" ]
}
ROUTE TimeOfDayClock.fraction_changed TO BackgroundColorInterpolator.set_fraction
DEF AnimatedBackground Background {
  groundAngle [ 0.03 1.26 1.5 1.57 ]
  groundColor [ 0.133333 0.419608 0 0.36 0.1 0 1 0.74 0.4 0 0 0.5 0 0 0.2 ]
  skyAngle [ 0.03 0.05 1.5 1.57 ]
  skyColor [ 1 1 1 0.8 0.8 0.8 0.1 0.1 0.1 0 0 0 0 0 0 ]
  transparency [ 0 ]
}
ROUTE BackgroundColorInterpolator.groundColor_changed TO AnimatedBackground.groundColor
ROUTE BackgroundColorInterpolator.skyColor_changed TO AnimatedBackground.skyColor
