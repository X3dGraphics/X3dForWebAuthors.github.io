package X3dForWebAuthors.KelpForestExhibit;

/*
Copyright (c) 1995-2022 held by the author(s).  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
    * Neither the name of the Web3D Consortium (https://www.web3d.org)
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/

import org.web3d.x3d.jsail.Core.*;
import org.web3d.x3d.jsail.fields.*;
import org.web3d.x3d.jsail.Geometry3D.*;
import org.web3d.x3d.jsail.Grouping.*;
import org.web3d.x3d.jsail.Navigation.*;
import org.web3d.x3d.jsail.Networking.*;
import org.web3d.x3d.jsail.Rendering.*;
import org.web3d.x3d.jsail.Shape.*;
import org.web3d.x3d.jsail.Text.*;
import org.web3d.x3d.jsail.Texturing.*;

// Javadoc annotations follow, see below for source.
/**
 * <p> High-resolution model of a seastar, created in Maya 4 and exposed as a prototype for further reuse. </p>
 <p> Related links: <a href="../../../KelpForestExhibit/SeaStarHighResolutionPrototype.java">SeaStarHighResolutionPrototype.java</a> source, <a href="../../../KelpForestExhibit/SeaStarHighResolutionPrototypeIndex.html" target="_top">SeaStarHighResolutionPrototype catalog page</a>, <a href="https://www.web3d.org/x3d/content/examples/X3dResources.html" target="_blank">X3D Resources</a>, <a href="https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html" target="_blank">X3D Scene Authoring Hints</a>, and <a href="https://www.web3d.org/x3d/content/X3dTooltips.html" target="_blank">X3D Tooltips</a>. </p>
	<table style="color:black; border:0px solid; border-spacing:10px 0px;">
        <caption>Scene Meta Information</caption>
		<tr style="background-color:silver; border-color:silver;">
			<td style="text-align:center; padding:10px 0px;"><i>meta tags</i></td>
			<td style="text-align:left;   padding:10px 0px;">&nbsp; Document Metadata </td>
		</tr>

		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> title </i> </td>
			<td> <a href="../../../KelpForestExhibit/SeaStarHighResolutionPrototype.x3d">SeaStarHighResolutionPrototype.x3d</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> description </i> </td>
			<td> High-resolution model of a seastar, created in Maya 4 and exposed as a prototype for further reuse. </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> creator </i> </td>
			<td> Charles Adams </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> translator </i> </td>
			<td> Xeena VRML importer, X3D-Edit 3.1, <a href="https://www.web3d.org/x3d/content/README.X3D-Edit.html" target="_blank">https://www.web3d.org/x3d/content/README.X3D-Edit.html</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> created </i> </td>
			<td> 25 November 2002 </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> modified </i> </td>
			<td> 20 October 2019 </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> rights </i> </td>
			<td> Copyright (c) c h a productions 2002 </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> identifier </i> </td>
			<td> <a href="https://X3dGraphics.com/examples/X3dForWebAuthors/KelpForestExhibit/SeaStarHighResolutionPrototype.x3d" target="_blank">https://X3dGraphics.com/examples/X3dForWebAuthors/KelpForestExhibit/SeaStarHighResolutionPrototype.x3d</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
			<td> X3D-Edit 3.3, <a href="https://savage.nps.edu/X3D-Edit" target="_blank">https://savage.nps.edu/X3D-Edit</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
			<td> Vrml97ToX3dNist, <a href="http://ovrt.nist.gov/v2_x3d.html" target="_blank">http://ovrt.nist.gov/v2_x3d.html</a> </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
			<td> Alias|Wavefront Maya 4.0 </td>
		</tr>
		<tr>
			<td style="text-align:right; vertical-align: text-top;"> <i> license </i> </td>
			<td> <a href="../../../KelpForestExhibit/../license.html">../license.html</a> </td>
		</tr>
		<tr style="background-color:silver; border-color:silver;">
			<td style="text-align:center;" colspan="2">  &nbsp; </td>
		</tr>
	</table>

	<p>
		This program uses the
		<a href="https://www.web3d.org/specifications/java/X3DJSAIL.html" target="_blank">X3D Java Scene Access Interface Library (X3DJSAIL)</a>.
		It has been produced using the 
		<a href="https://www.web3d.org/x3d/stylesheets/X3dToJava.xslt" target="_blank">X3dToJava.xslt</a>
		stylesheet to create Java source code from an <code>.x3d</code> model.
	</p>

	* @author Charles Adams
 */

public class SeaStarHighResolutionPrototype
{
	/** Default constructor to create this object. */
	public SeaStarHighResolutionPrototype ()
	{
	  initialize();
	}

	/** Create and initialize the X3D model for this object. */
	public final void initialize()
	{
  x3dModel = new X3D().setProfile(X3D.PROFILE_IMMERSIVE).setVersion(X3D.VERSION_3_3)
  .setHead(new head()
    .addMeta(new meta().setName(meta.NAME_TITLE      ).setContent("SeaStarHighResolutionPrototype.x3d"))
    .addMeta(new meta().setName(meta.NAME_DESCRIPTION).setContent("High-resolution model of a seastar, created in Maya 4 and exposed as a prototype for further reuse."))
    .addMeta(new meta().setName(meta.NAME_CREATOR    ).setContent("Charles Adams"))
    .addMeta(new meta().setName(meta.NAME_TRANSLATOR ).setContent("Xeena VRML importer, X3D-Edit 3.1, https://www.web3d.org/x3d/content/README.X3D-Edit.html"))
    .addMeta(new meta().setName(meta.NAME_CREATED    ).setContent("25 November 2002"))
    .addMeta(new meta().setName(meta.NAME_MODIFIED   ).setContent("20 October 2019"))
    .addMeta(new meta().setName(meta.NAME_RIGHTS     ).setContent("Copyright (c) c h a productions 2002"))
    .addMeta(new meta().setName(meta.NAME_IDENTIFIER ).setContent("https://X3dGraphics.com/examples/X3dForWebAuthors/KelpForestExhibit/SeaStarHighResolutionPrototype.x3d"))
    .addMeta(new meta().setName(meta.NAME_GENERATOR  ).setContent("X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"))
    .addMeta(new meta().setName(meta.NAME_GENERATOR  ).setContent("Vrml97ToX3dNist, http://ovrt.nist.gov/v2_x3d.html"))
    .addMeta(new meta().setName(meta.NAME_GENERATOR  ).setContent("Alias|Wavefront Maya 4.0"))
    .addMeta(new meta().setName(meta.NAME_LICENSE    ).setContent("../license.html")))
  .setScene(new Scene()
    .addChild(new WorldInfo().setInfo(new String[] {"VRML2.0 created with Version 1.3, from Alias|Wavefront Maya 4.0"}).setTitle("seastar"))
    .addChild(new ProtoDeclare("SeaStar").setName("SeaStar").setAppinfo("High-resolution model of a seastar")
      .setProtoInterface(new ProtoInterface()
        .addField(new field().setName("scale").setType(field.TYPE_SFVEC3F).setAccessType(field.ACCESSTYPE_INPUTOUTPUT).setValue(new SFVec3f(.5,.5,.5)))
        .addField(new field().setName("Appearance").setType(field.TYPE_SFNODE).setAccessType(field.ACCESSTYPE_INPUTOUTPUT)
          .addChild(new Appearance()
            .setMaterial(new Material("sfishtexture_0").setDiffuseColor(0.0,0.0,0.0).setShininess(0.0))
            .setTexture(new ImageTexture().setUrl(new String[] {"SeaStarLegPatchHighResolution.jpg","https://X3dGraphics.com/examples/X3dForWebAuthors/KelpForestExhibit/SeaStarLegPatchHighResolution.jpg"})))))
      .setProtoBody(new ProtoBody()
        .addChild(new Transform().setScale(0.01,0.01,0.01)
          .addChild(new Transform("starfish").setRotation(1.0,0.0,0.0,3.14)
            .setIS(new IS()
              .addConnect(new connect().setNodeField("scale").setProtoField("scale")))
            .addChild(new Transform("sfishp1").setRotation(1.0,0.0,0.0,3.141593)
              .addChild(new Shape()
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("appearance").setProtoField("Appearance")))
                .setGeometry(new IndexedFaceSet().setConvex(false).setSolid(false).setCoordIndex(getIndexedFaceSet_9_25_coordIndex()).setTexCoordIndex(getIndexedFaceSet_9_25_texCoordIndex())
                  .setCoord(new Coordinate("sfishp1GeoPoints").setPoint(getsfishp1GeoPoints_10_25_point()))
                  .setTexCoord(new TextureCoordinate().setPoint(getTextureCoordinate_10_26_point())))))
            .addChild(new Transform("sfishp2").setRotation(0.809017,0.0,-0.587785,3.141593)
              .addChild(new Shape()
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("appearance").setProtoField("Appearance")))
                .setGeometry(new IndexedFaceSet().setConvex(false).setSolid(false).setCoordIndex(getIndexedFaceSet_9_32_coordIndex()).setTexCoordIndex(getIndexedFaceSet_9_32_texCoordIndex())
                  .setCoord(new Coordinate("sfishp2GeoPoints").setPoint(getsfishp2GeoPoints_10_32_point()))
                  .setTexCoord(new TextureCoordinate().setPoint(getTextureCoordinate_10_33_point())))))
            .addChild(new Transform("sfishp3").setRotation(-0.309017,0.0,0.951057,3.141593)
              .addChild(new Shape()
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("appearance").setProtoField("Appearance")))
                .setGeometry(new IndexedFaceSet().setConvex(false).setSolid(false).setCoordIndex(getIndexedFaceSet_9_39_coordIndex()).setTexCoordIndex(getIndexedFaceSet_9_39_texCoordIndex())
                  .setCoord(new Coordinate("sfishp3GeoPoints").setPoint(getsfishp3GeoPoints_10_39_point()))
                  .setTexCoord(new TextureCoordinate().setPoint(getTextureCoordinate_10_40_point())))))
            .addChild(new Transform("sfishp4").setRotation(0.309017,0.0,0.951057,3.141593)
              .addChild(new Shape()
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("appearance").setProtoField("Appearance")))
                .setGeometry(new IndexedFaceSet().setConvex(false).setSolid(false).setCoordIndex(getIndexedFaceSet_9_46_coordIndex()).setTexCoordIndex(getIndexedFaceSet_9_46_texCoordIndex())
                  .setCoord(new Coordinate("sfishp4GeoPoints").setPoint(getsfishp4GeoPoints_10_46_point()))
                  .setTexCoord(new TextureCoordinate().setPoint(getTextureCoordinate_10_47_point())))))
            .addChild(new Transform("sfishp5").setRotation(0.809017,0.0,0.587785,3.141593)
              .addChild(new Shape()
                .setIS(new IS()
                  .addConnect(new connect().setNodeField("appearance").setProtoField("Appearance")))
                .setGeometry(new IndexedFaceSet().setConvex(false).setSolid(false).setCoordIndex(getIndexedFaceSet_9_53_coordIndex()).setTexCoordIndex(getIndexedFaceSet_9_53_texCoordIndex())
                  .setCoord(new Coordinate("sfishp5GeoPoints").setPoint(getsfishp5GeoPoints_10_53_point()))
                  .setTexCoord(new TextureCoordinate().setPoint(getTextureCoordinate_10_54_point())))))))))
    .addComments(" ==================== ")
    .addChild(new NavigationInfo().setType("\"WALK\" \"EXAMINE\" \"FLY\" \"ANY\""))
    .addChild(new Anchor().setDescription("SeaStarHighResolutionExample").setParameter(new String[] {"target=_blank"}).setUrl(new String[] {"SeaStarHighResolutionExample.x3d","https://X3dGraphics.com/examples/X3dForWebAuthors/KelpForestExhibit/SeaStarHighResolutionExample.x3d","SeaStarHighResolutionExample.wrl","https://X3dGraphics.com/examples/X3dForWebAuthors/KelpForestExhibit/SeaStarHighResolutionExample.wrl"})
      .addChild(new Shape()
        .setAppearance(new Appearance()
          .setMaterial(new Material().setDiffuseColor(0.0,1.0,1.0).setEmissiveColor(0.0,1.0,1.0)))
        .setGeometry(new Text().setString(new String[] {"SeaStarHighResolutionPrototype","is a Prototype declaration file.","","To see an example scene using this new node,","click this text and view","SeaStarHighResolutionExample"})
          .setFontStyle(new FontStyle().setJustify(FontStyle.JUSTIFY_MIDDLE_MIDDLE).setSize(0.7))))));
    }
	// end of initialize() method

		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_9_25_coordIndex_1()
		{
			int[] value = {220,2,222,221,-1,113,3,115,114,-1,60,4,62,61,-1,31,5,33,32,-1,18,7,20,19,-1,12,8,15,14,-1,11,10,0,-1,0,9,11,-1,13,6,12,14,-1,9,13,14,11,-1,15,10,11,14,-1,16,0,17,-1,0,10,17,-1,8,18,19,15,-1,19,17,10,15,-1,20,16,17,19,-1,25,21,28,27,-1,24,23,8,12,-1,6,22,24,12,-1,26,1,25,27,-1,22,26,27,24,-1,28,23,24,27,-1,29,7,18,30,-1,18,8,23,30,-1,21,31,32,28,-1,32,30,23,28,-1,33,29,30,32,-1,34,48,47,46,-1,38,35,40,39,-1,0,37,36,-1,0,16,37,-1,20,7,38,39,-1,16,20,39,37,-1,40,36,37,39,-1,40,35,41,43,-1,0,36,42,-1,36,40,43,42,-1,44,0,45,-1,0,42,45,-1,43,41,46,47,-1,45,42,43,47,-1,48,44,45,47,-1,52,49,54,53,-1,50,35,38,51,-1,38,7,29,51,-1,5,52,53,33,-1,53,51,29,33,-1,54,50,51,53,-1,49,55,57,54,-1,56,41,35,50,-1,57,56,50,54,-1,58,34,46,59,-1,46,41,56,59,-1,55,60,61,57,-1,61,59,56,57,-1,62,58,59,61,-1,84,63,86,85,-1,64,75,74,73,-1,68,65,70,69,-1,0,67,66,-1,0,44,67,-1,48,34,68,69,-1,44,48,69,67,-1,70,66,67,69,-1,71,0,72,-1,0,66,72,-1,70,65,73,74,-1,72,66,70,74,-1,75,71,72,74,-1,79,76,81,80,-1,77,65,68,78,-1,68,34,58,78,-1,4,79,80,62,-1,80,78,58,62,-1,81,77,78,80,-1,82,64,73,83,-1,73,65,77,83,-1,76,84,85,81,-1,85,83,77,81,-1,86,82,83,85,-1,87,101,100,99,-1,91,88,93,92,-1,0,90,89,-1,0,71,90,-1,75,64,91,92,-1,71,75,92,90,-1,93,89,90,92,-1,93,88,94,96,-1,0,89,95,-1,89,93,96,95,-1,97,0,98,-1,0,95,98,-1,96,94,99,100,-1,98,95,96,100,-1,101,97,98,100,-1,105,102,107,106,-1,103,88,91,104,-1,91,64,82,104,-1,63,105,106,86,-1,106,104,82,86,-1,107,103,104,106,-1,102,108,110,107,-1,109,94,88,103,-1,110,109,103,107,-1,111,87,99,112,-1,99,94,109,112,-1,108,113,114,110,-1,114,112,109,110,-1,115,111,112,114,-1,167,116,169,168,-1,138,117,140,139,-1,118,129,128,127,-1,122,119,124,123,-1,0,121,120,-1,0,97,121,-1,101,87,122,123,-1,97,101,123,121,-1,124,120,121,123,-1,125,0,126,-1,0,120,126,-1,124,119,127,128,-1,126,120,124,128,-1,129,125,126,128,-1,133,130,135,134,-1,131,119,122,132,-1,122,87,111,132,-1,3,133,134,115,-1,134,132,111,115,-1,135,131,132,134,-1,136,118,127,137,-1,127,119,131,137,-1,130,138,139,135,-1,139,137,131,135,-1,140,136,137,139,-1,141,155,154,153,-1,145,142,147,146,-1,0,144,143,-1,0,125,144,-1,129,118,145,146,-1,125,129,146,144,-1,147,143,144,146,-1,147,142,148,150,-1,0,143,149,-1,143,147,150,149,-1,151,0,152,-1,0,149,152,-1,150,148,153,154,-1,152,149,150,154,-1,155,151,152,154,-1,159,156,161,160,-1,157,142,145,158,-1,145,118,136,158,-1,117,159,160,140,-1,160,158,136,140,-1,161,157,158,160,-1,156,162,164,161,-1,163,148,142,157,-1,164,163,157,161,-1,165,141,153,166,-1,153,148,163,166,-1,162,167,168,164,-1,168,166,163,164,-1,169,165,166,168,-1,191,170,193,192,-1,171,182,181,180,-1,175,172,177,176,-1,0,174,173,-1,0,151,174,-1,155,141,175,176,-1,151,155,176,174,-1,177,173,174,176,-1,178,0,179,-1,0,173,179,-1,177,172,180,181,-1,179,173,177,181,-1,182,178,179,181,-1,186,183,188,187,-1,184,172,175,185,-1,175,141,165,185,-1,116,186,187,169,-1,187,185,165,169,-1,188,184,185,187,-1,189,171,180,190,-1,180,172,184,190,-1,183,191,192,188,-1,192,190,184,188,-1,193,189,190,192,-1,194,208,207,206,-1,198,195,200,199,-1,0,197,196,-1,0,178,197,-1,182,171,198,199,-1,178,182,199,197,-1,200,196,197,199,-1,200,195,201,203,-1,0,196,202,-1,196,200,203,202,-1,204,0,205,-1,0,202,205,-1,203,201,206,207,-1,205,202,203,207,-1,208,204,205,207,-1,212,209,214,213,-1,210,195,198,211,-1,198,171,189,211,-1,170,212,213,193,-1,213,211,189,193,-1,214};
			return value;
		}
		private int[] getIndexedFaceSet_9_25_coordIndex_2()
		{
			int[] value = {210,211,213,-1,209,215,217,214,-1,216,201,195,210,-1,217,216,210,214,-1,218,194,206,219,-1,206,201,216,219,-1,215,220,221,217,-1,221,219,216,217,-1,222,218,219,221,-1};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_9_25_texCoordIndex_1()
		{
			int[] value = {0,1,2,3,-1,4,5,6,7,-1,8,9,10,11,-1,12,13,14,15,-1,16,17,18,19,-1,20,21,22,23,-1,24,25,26,-1,27,28,24,-1,29,30,20,23,-1,28,29,23,24,-1,22,25,24,23,-1,31,32,33,-1,34,25,33,-1,21,16,19,22,-1,19,33,25,22,-1,18,31,33,19,-1,35,36,37,38,-1,39,40,21,20,-1,30,41,39,20,-1,42,43,35,38,-1,41,42,38,39,-1,37,40,39,38,-1,44,17,16,45,-1,16,21,40,45,-1,36,12,15,37,-1,15,45,40,37,-1,14,44,45,15,-1,46,47,48,49,-1,50,51,52,53,-1,54,55,56,-1,57,31,55,-1,18,17,50,53,-1,31,18,53,55,-1,52,56,55,53,-1,52,51,58,59,-1,60,56,61,-1,56,52,59,61,-1,62,63,64,-1,65,61,64,-1,59,58,49,48,-1,64,61,59,48,-1,47,62,64,48,-1,66,67,68,69,-1,70,51,50,71,-1,50,17,44,71,-1,13,66,69,14,-1,69,71,44,14,-1,68,70,71,69,-1,67,72,73,68,-1,74,58,51,70,-1,73,74,70,68,-1,75,46,49,76,-1,49,58,74,76,-1,72,8,11,73,-1,11,76,74,73,-1,10,75,76,11,-1,77,78,79,80,-1,81,82,83,84,-1,85,86,87,88,-1,89,90,91,-1,92,62,90,-1,47,46,85,88,-1,62,47,88,90,-1,87,91,90,88,-1,93,94,95,-1,96,91,95,-1,87,86,84,83,-1,95,91,87,83,-1,82,93,95,83,-1,97,98,99,100,-1,101,86,85,102,-1,85,46,75,102,-1,9,97,100,10,-1,100,102,75,10,-1,99,101,102,100,-1,103,81,84,104,-1,84,86,101,104,-1,98,77,80,99,-1,80,104,101,99,-1,79,103,104,80,-1,105,106,107,108,-1,109,110,111,112,-1,113,114,115,-1,116,93,114,-1,82,81,109,112,-1,93,82,112,114,-1,111,115,114,112,-1,111,110,117,118,-1,119,115,120,-1,115,111,118,120,-1,121,122,123,-1,124,120,123,-1,118,117,108,107,-1,123,120,118,107,-1,106,121,123,107,-1,125,126,127,128,-1,129,110,109,130,-1,109,81,103,130,-1,78,125,128,79,-1,128,130,103,79,-1,127,129,130,128,-1,126,131,132,127,-1,133,117,110,129,-1,132,133,129,127,-1,134,105,108,135,-1,108,117,133,135,-1,131,4,7,132,-1,7,135,133,132,-1,6,134,135,7,-1,136,137,138,139,-1,140,141,142,143,-1,144,145,146,147,-1,148,149,150,151,-1,152,153,154,-1,155,121,153,-1,106,105,148,151,-1,121,106,151,153,-1,150,154,153,151,-1,156,157,158,-1,159,154,158,-1,150,149,147,146,-1,158,154,150,146,-1,145,156,158,146,-1,160,161,162,163,-1,164,149,148,165,-1,148,105,134,165,-1,5,160,163,6,-1,163,165,134,6,-1,162,164,165,163,-1,166,144,147,167,-1,147,149,164,167,-1,161,140,143,162,-1,143,167,164,162,-1,142,166,167,143,-1,168,169,170,171,-1,172,173,174,175,-1,176,177,178,-1,179,156,177,-1,145,144,172,175,-1,156,145,175,177,-1,174,178,177,175,-1,174,173,180,181,-1,182,178,183,-1,178,174,181,183,-1,184,185,186,-1,187,183,186,-1,181,180,171,170,-1,186,183,181,170,-1,169,184,186,170,-1,188,189,190,191,-1,192,173,172,193,-1,172,144,166,193,-1,141,188,191,142,-1,191,193,166,142,-1,190,192,193,191,-1,189,194,195,190,-1,196,180,173,192,-1,195,196,192,190,-1,197,168,171,198,-1,171,180,196,198,-1,194,136,139,195,-1,139,198,196,195,-1,138,197,198,139,-1,199,200,201,202,-1,203,204,205,206,-1,207,208,209,210,-1,211,212,213,-1,214,184,212,-1,169,168,207,210,-1,184,169,210,212,-1,209,213,212,210,-1,215,216,217,-1,218,213,217,-1,209,208,206,205,-1,217,213,209,205,-1,204,215,217,205,-1,219,220,221,222,-1,223,208,207,224,-1,207,168,197,224,-1,137,219,222,138,-1,222,224,197,138,-1,221,223,224,222,-1,225,203,206,226,-1,206,208,223,226,-1,220,199,202,221,-1,202,226,223,221,-1,201,225,226,202,-1,227,228,229,230,-1,231,232,233,234,-1,235,236,237,-1,238,215,236,-1,204,203,231,234,-1,215,204,234,236,-1,233,237,236,234,-1,233,232,239,240,-1,241,237,242,-1,237,233,240,242,-1,243,244,245,-1,246,242,245,-1,240,239,230,229,-1,245,242,240,229,-1,228,243,245,229,-1,247,248,249,250,-1,251,232,231,252,-1,231,203,225,252,-1,200,247,250,201,-1,250,252,225,201,-1,249};
			return value;
		}
		private int[] getIndexedFaceSet_9_25_texCoordIndex_2()
		{
			int[] value = {251,252,250,-1,248,253,254,249,-1,255,239,232,251,-1,254,255,251,249,-1,256,227,230,257,-1,230,239,255,257,-1,253,0,3,254,-1,3,257,255,254,-1,2,256,257,3,-1};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getsfishp1GeoPoints_10_25_point_1()
		{
			double[] value = {-0.208,0.0,10.0,0.416,-0.212,0.573,-0.416,-0.212,0.573,0.0,1.114,0.077,1.676,-0.0,2.307,1.147,-0.405,1.573,0.62,-0.023,5.924,0.965,-0.289,5.951,0.666,-0.157,5.949,0.296,-0.032,8.293,0.247,-0.162,8.304,0.261,-0.093,8.299,0.635,-0.091,5.939,0.562,-0.057,7.015,0.542,-0.13,7.026,0.544,-0.209,7.034,0.411,-0.284,8.307,0.29,-0.229,8.307,0.766,-0.224,5.953,0.619,-0.287,7.038,0.794,-0.356,7.037,0.704,-0.245,0.925,0.521,0.078,4.753,0.63,-0.046,4.791,0.57,0.013,4.774,0.568,-0.188,0.735,0.401,0.083,3.11,0.49,0.039,3.169,0.582,-0.02,3.232,0.973,-0.17,4.818,0.754,-0.107,4.805,0.884,-0.331,1.196,0.733,-0.087,3.315,0.973,-0.153,3.427,1.412,0.108,5.939,1.412,-0.328,5.939,0.705,-0.303,8.304,0.568,-0.313,8.306,1.207,-0.333,5.945,1.016,-0.397,7.032,1.207,-0.388,7.028,1.518,-0.255,5.936,0.776,-0.243,8.302,1.306,-0.312,7.025,0.705,0.0040,8.304,0.775,-0.138,8.302,1.516,-0.109,5.936,1.304,-0.169,7.025,1.207,0.032,7.028,1.676,-0.436,2.307,1.445,-0.212,4.836,1.23,-0.214,4.828,1.438,-0.444,1.978,1.246,-0.195,3.545,1.474,-0.192,3.64,1.798,-0.367,2.475,1.555,-0.143,4.839,1.59,-0.124,3.689,1.445,0.224,4.836,1.553,0.0020,4.839,1.796,-0.224,2.472,1.587,0.02,3.688,1.474,0.244,3.64,0.619,1.016,0.852,0.592,1.081,5.945,0.99,0.677,5.952,0.424,0.34,8.308,0.577,0.171,8.306,1.223,0.386,5.946,1.029,0.279,7.033,0.815,0.534,7.038,0.205,0.579,8.303,0.29,0.483,8.307,0.766,0.923,5.953,0.619,0.749,7.038,0.48,0.892,7.032,1.168,0.619,1.608,1.0,0.824,4.821,1.247,0.516,4.83,1.452,0.302,1.999,1.264,0.543,3.552,0.999,0.857,3.438,0.549,1.242,4.784,0.754,1.082,4.805,0.876,0.876,1.206,0.73,1.118,3.318,0.498,1.271,3.207,0.196,1.255,5.92,0.371,1.21,5.924,0.124,0.67,8.293,0.157,0.637,8.298,0.464,1.167,5.934,0.39,0.973,7.022,0.325,1.017,7.014,0.301,1.235,5.919,0.086,0.689,8.291,0.266,1.044,7.011,-0.0030,0.703,8.292,0.043,0.7,8.291,0.245,1.25,5.919};
			return value;
		}
		private double[] getsfishp1GeoPoints_10_25_point_2()
		{
			double[] value = {0.209,1.058,7.011,0.153,1.062,7.011,0.247,1.08,0.34,0.273,1.36,4.743,0.39,1.323,4.762,0.408,1.067,0.561,0.312,1.341,3.112,0.173,1.368,3.04,0.135,1.093,0.189,0.193,1.383,4.734,0.081,1.388,2.992,0.097,1.403,4.73,0.139,1.398,4.731,0.059,1.108,0.103,0.022,1.402,2.967,-0.021,1.408,2.96,-1.676,-0.0,2.307,-0.408,1.067,0.561,-0.073,1.167,5.934,0.091,1.235,5.919,-0.092,0.689,8.291,-0.049,0.7,8.291,0.147,1.25,5.919,0.097,1.058,7.011,0.041,1.044,7.011,-0.163,0.637,8.298,-0.129,0.67,8.293,0.02,1.21,5.924,-0.018,1.017,7.014,-0.083,0.973,7.022,-0.135,1.093,0.189,0.0010,1.383,4.734,0.055,1.398,4.731,-0.059,1.108,0.103,-0.064,1.402,2.967,-0.123,1.388,2.992,-0.196,1.323,4.762,-0.079,1.36,4.743,-0.247,1.08,0.34,-0.215,1.368,3.04,-0.354,1.341,3.112,-1.021,0.108,5.939,-0.375,0.923,5.953,-0.296,0.483,8.307,-0.211,0.579,8.303,-0.2,1.081,5.945,-0.174,0.892,7.032,-0.312,0.749,7.038,-0.599,0.677,5.952,-0.43,0.34,8.308,-0.509,0.534,7.038,-0.711,0.0040,8.304,-0.582,0.171,8.306,-0.831,0.386,5.946,-0.723,0.279,7.033,-0.901,0.032,7.028,-0.876,0.876,1.206,-0.56,1.082,4.805,-0.355,1.242,4.784,-0.619,1.016,0.852,-0.54,1.271,3.207,-0.772,1.118,3.318,-1.168,0.619,1.608,-0.806,0.824,4.821,-1.041,0.857,3.438,-1.251,0.224,4.836,-1.053,0.516,4.83,-1.452,0.302,1.999,-1.306,0.543,3.552,-1.516,0.244,3.64,-1.437,-0.444,1.978,-0.816,-0.333,5.945,-1.127,-0.255,5.936,-0.782,-0.243,8.302,-0.781,-0.138,8.302,-1.124,-0.109,5.936,-0.998,-0.169,7.025,-1.0,-0.312,7.025,-0.574,-0.313,8.306,-0.711,-0.303,8.304,-1.021,-0.328,5.939,-0.901,-0.388,7.028,-0.709,-0.397,7.032,-1.798,-0.367,2.475,-1.361,-0.143,4.839,-1.359,0.0020,4.839,-1.796,-0.224,2.472,-1.63,0.02,3.688,-1.632,-0.124,3.689,-1.036,-0.214,4.828,-1.251,-0.212,4.836,-1.676,-0.436,2.307,-1.516,-0.192,3.64,-1.289,-0.195,3.545,-0.228,-0.023,5.924,-0.375,-0.224,5.953,-0.296,-0.229,8.307,-0.416,-0.284,8.307,-0.574,-0.289,5.951,-0.488,-0.356,7.037};
			return value;
		}
		private double[] getsfishp1GeoPoints_10_25_point_3()
		{
			double[] value = {-0.312,-0.287,7.038,-0.275,-0.157,5.949,-0.253,-0.162,8.304,-0.238,-0.209,7.034,-0.301,-0.032,8.293,-0.267,-0.093,8.299,-0.244,-0.091,5.939,-0.235,-0.13,7.026,-0.255,-0.057,7.015,-0.876,-0.332,1.206,-0.56,-0.108,4.805,-0.779,-0.17,4.818,-1.145,-0.405,1.576,-1.014,-0.153,3.428,-0.772,-0.088,3.318,-0.687,-0.245,0.945,-0.435,-0.046,4.792,-0.62,-0.02,3.238,-0.327,0.078,4.753,-0.375,0.013,4.775,-0.55,-0.189,0.757,-0.527,0.039,3.175,-0.443,0.083,3.11};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getTextureCoordinate_10_26_point_1()
		{
			double[] value = {1.0,0.972222,1.0,1.0,0.833333,1.0,0.833333,0.972222,1.0,0.472222,1.0,0.5,0.833333,0.5,0.833333,0.472222,1.0,0.222222,1.0,0.25,0.833333,0.25,0.833333,0.222222,1.0,0.083333,1.0,0.111111,0.833333,0.111111,0.833333,0.083333,0.5,0.083333,0.5,0.111111,0.333333,0.111111,0.333333,0.083333,0.5,0.027778,0.5,0.055556,0.333333,0.055556,0.333333,0.027778,0.166667,0.027778,0.166667,0.055556,0.0,0.027778,0.0,0.0,0.166667,0.0,0.333333,0.0,0.5,0.0,0.166667,0.111111,0.0,0.083333,0.166667,0.083333,0.0,0.055556,1.0,0.027778,1.0,0.055556,0.833333,0.055556,0.833333,0.027778,0.666667,0.027778,0.666667,0.055556,0.666667,0.0,0.833333,0.0,1.0,0.0,0.666667,0.111111,0.666667,0.083333,0.5,0.25,0.333333,0.25,0.333333,0.222222,0.5,0.222222,0.5,0.138889,0.5,0.166667,0.333333,0.166667,0.333333,0.138889,0.0,0.138889,0.166667,0.138889,0.166667,0.166667,0.0,0.111111,0.5,0.194444,0.333333,0.194444,0.0,0.166667,0.166667,0.194444,0.166667,0.25,0.0,0.222222,0.166667,0.222222,0.0,0.194444,1.0,0.138889,1.0,0.166667,0.833333,0.166667,0.833333,0.138889,0.666667,0.166667,0.666667,0.138889,1.0,0.194444,0.833333,0.194444,0.666667,0.194444,0.666667,0.25,0.666667,0.222222,1.0,0.333333,1.0,0.361111,0.833333,0.361111,0.833333,0.333333,0.5,0.361111,0.333333,0.361111,0.333333,0.333333,0.5,0.333333,0.5,0.277778,0.5,0.305556,0.333333,0.305556,0.333333,0.277778,0.0,0.277778,0.166667,0.277778,0.166667,0.305556,0.0,0.25,0.166667,0.361111,0.0,0.333333,0.166667,0.333333,0.0,0.305556,1.0,0.277778,1.0,0.305556,0.833333,0.305556};
			return value;
		}
		private double[] getTextureCoordinate_10_26_point_2()
		{
			double[] value = {0.833333,0.277778,0.666667,0.305556,0.666667,0.277778,0.666667,0.361111,0.666667,0.333333,0.5,0.5,0.333333,0.5,0.333333,0.472222,0.5,0.472222,0.5,0.388889,0.5,0.416667,0.333333,0.416667,0.333333,0.388889,0.0,0.388889,0.166667,0.388889,0.166667,0.416667,0.0,0.361111,0.5,0.444444,0.333333,0.444444,0.0,0.416667,0.166667,0.444444,0.166667,0.5,0.0,0.472222,0.166667,0.472222,0.0,0.444444,1.0,0.388889,1.0,0.416667,0.833333,0.416667,0.833333,0.388889,0.666667,0.416667,0.666667,0.388889,1.0,0.444444,0.833333,0.444444,0.666667,0.444444,0.666667,0.5,0.666667,0.472222,1.0,0.722222,1.0,0.75,0.833333,0.75,0.833333,0.722222,1.0,0.583333,1.0,0.611111,0.833333,0.611111,0.833333,0.583333,0.5,0.611111,0.333333,0.611111,0.333333,0.583333,0.5,0.583333,0.5,0.527778,0.5,0.555556,0.333333,0.555556,0.333333,0.527778,0.0,0.527778,0.166667,0.527778,0.166667,0.555556,0.0,0.5,0.166667,0.611111,0.0,0.583333,0.166667,0.583333,0.0,0.555556,1.0,0.527778,1.0,0.555556,0.833333,0.555556,0.833333,0.527778,0.666667,0.555556,0.666667,0.527778,0.666667,0.611111,0.666667,0.583333,0.5,0.75,0.333333,0.75,0.333333,0.722222,0.5,0.722222,0.5,0.638889,0.5,0.666667,0.333333,0.666667,0.333333,0.638889,0.0,0.638889,0.166667,0.638889,0.166667,0.666667,0.0,0.611111,0.5,0.694444,0.333333,0.694444,0.0,0.666667,0.166667,0.694444,0.166667,0.75,0.0,0.722222,0.166667,0.722222,0.0,0.694444,1.0,0.638889,1.0,0.666667,0.833333,0.666667,0.833333,0.638889,0.666667,0.666667,0.666667,0.638889,1.0,0.694444,0.833333,0.694444,0.666667,0.694444,0.666667,0.75,0.666667,0.722222,1.0,0.833333};
			return value;
		}
		private double[] getTextureCoordinate_10_26_point_3()
		{
			double[] value = {1.0,0.861111,0.833333,0.861111,0.833333,0.833333,0.5,0.861111,0.333333,0.861111,0.333333,0.833333,0.5,0.833333,0.5,0.777778,0.5,0.805556,0.333333,0.805556,0.333333,0.777778,0.0,0.777778,0.166667,0.777778,0.166667,0.805556,0.0,0.75,0.166667,0.861111,0.0,0.833333,0.166667,0.833333,0.0,0.805556,1.0,0.777778,1.0,0.805556,0.833333,0.805556,0.833333,0.777778,0.666667,0.805556,0.666667,0.777778,0.666667,0.861111,0.666667,0.833333,0.5,1.0,0.333333,1.0,0.333333,0.972222,0.5,0.972222,0.5,0.888889,0.5,0.916667,0.333333,0.916667,0.333333,0.888889,0.0,0.888889,0.166667,0.888889,0.166667,0.916667,0.0,0.861111,0.5,0.944444,0.333333,0.944444,0.0,0.916667,0.166667,0.944444,0.166667,1.0,0.0,0.972222,0.166667,0.972222,0.0,0.944444,1.0,0.888889,1.0,0.916667,0.833333,0.916667,0.833333,0.888889,0.666667,0.916667,0.666667,0.888889,1.0,0.944444,0.833333,0.944444,0.666667,0.944444,0.666667,1.0,0.666667,0.972222};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_9_32_coordIndex_1()
		{
			int[] value = {220,2,222,221,-1,113,3,115,114,-1,60,4,62,61,-1,31,5,33,32,-1,18,7,20,19,-1,12,8,15,14,-1,11,10,0,-1,0,9,11,-1,13,6,12,14,-1,9,13,14,11,-1,15,10,11,14,-1,16,0,17,-1,0,10,17,-1,8,18,19,15,-1,19,17,10,15,-1,20,16,17,19,-1,25,21,28,27,-1,24,23,8,12,-1,6,22,24,12,-1,26,1,25,27,-1,22,26,27,24,-1,28,23,24,27,-1,29,7,18,30,-1,18,8,23,30,-1,21,31,32,28,-1,32,30,23,28,-1,33,29,30,32,-1,34,48,47,46,-1,38,35,40,39,-1,0,37,36,-1,0,16,37,-1,20,7,38,39,-1,16,20,39,37,-1,40,36,37,39,-1,40,35,41,43,-1,0,36,42,-1,36,40,43,42,-1,44,0,45,-1,0,42,45,-1,43,41,46,47,-1,45,42,43,47,-1,48,44,45,47,-1,52,49,54,53,-1,50,35,38,51,-1,38,7,29,51,-1,5,52,53,33,-1,53,51,29,33,-1,54,50,51,53,-1,49,55,57,54,-1,56,41,35,50,-1,57,56,50,54,-1,58,34,46,59,-1,46,41,56,59,-1,55,60,61,57,-1,61,59,56,57,-1,62,58,59,61,-1,84,63,86,85,-1,64,75,74,73,-1,68,65,70,69,-1,0,67,66,-1,0,44,67,-1,48,34,68,69,-1,44,48,69,67,-1,70,66,67,69,-1,71,0,72,-1,0,66,72,-1,70,65,73,74,-1,72,66,70,74,-1,75,71,72,74,-1,79,76,81,80,-1,77,65,68,78,-1,68,34,58,78,-1,4,79,80,62,-1,80,78,58,62,-1,81,77,78,80,-1,82,64,73,83,-1,73,65,77,83,-1,76,84,85,81,-1,85,83,77,81,-1,86,82,83,85,-1,87,101,100,99,-1,91,88,93,92,-1,0,90,89,-1,0,71,90,-1,75,64,91,92,-1,71,75,92,90,-1,93,89,90,92,-1,93,88,94,96,-1,0,89,95,-1,89,93,96,95,-1,97,0,98,-1,0,95,98,-1,96,94,99,100,-1,98,95,96,100,-1,101,97,98,100,-1,105,102,107,106,-1,103,88,91,104,-1,91,64,82,104,-1,63,105,106,86,-1,106,104,82,86,-1,107,103,104,106,-1,102,108,110,107,-1,109,94,88,103,-1,110,109,103,107,-1,111,87,99,112,-1,99,94,109,112,-1,108,113,114,110,-1,114,112,109,110,-1,115,111,112,114,-1,167,116,169,168,-1,138,117,140,139,-1,118,129,128,127,-1,122,119,124,123,-1,0,121,120,-1,0,97,121,-1,101,87,122,123,-1,97,101,123,121,-1,124,120,121,123,-1,125,0,126,-1,0,120,126,-1,124,119,127,128,-1,126,120,124,128,-1,129,125,126,128,-1,133,130,135,134,-1,131,119,122,132,-1,122,87,111,132,-1,3,133,134,115,-1,134,132,111,115,-1,135,131,132,134,-1,136,118,127,137,-1,127,119,131,137,-1,130,138,139,135,-1,139,137,131,135,-1,140,136,137,139,-1,141,155,154,153,-1,145,142,147,146,-1,0,144,143,-1,0,125,144,-1,129,118,145,146,-1,125,129,146,144,-1,147,143,144,146,-1,147,142,148,150,-1,0,143,149,-1,143,147,150,149,-1,151,0,152,-1,0,149,152,-1,150,148,153,154,-1,152,149,150,154,-1,155,151,152,154,-1,159,156,161,160,-1,157,142,145,158,-1,145,118,136,158,-1,117,159,160,140,-1,160,158,136,140,-1,161,157,158,160,-1,156,162,164,161,-1,163,148,142,157,-1,164,163,157,161,-1,165,141,153,166,-1,153,148,163,166,-1,162,167,168,164,-1,168,166,163,164,-1,169,165,166,168,-1,191,170,193,192,-1,171,182,181,180,-1,175,172,177,176,-1,0,174,173,-1,0,151,174,-1,155,141,175,176,-1,151,155,176,174,-1,177,173,174,176,-1,178,0,179,-1,0,173,179,-1,177,172,180,181,-1,179,173,177,181,-1,182,178,179,181,-1,186,183,188,187,-1,184,172,175,185,-1,175,141,165,185,-1,116,186,187,169,-1,187,185,165,169,-1,188,184,185,187,-1,189,171,180,190,-1,180,172,184,190,-1,183,191,192,188,-1,192,190,184,188,-1,193,189,190,192,-1,194,208,207,206,-1,198,195,200,199,-1,0,197,196,-1,0,178,197,-1,182,171,198,199,-1,178,182,199,197,-1,200,196,197,199,-1,200,195,201,203,-1,0,196,202,-1,196,200,203,202,-1,204,0,205,-1,0,202,205,-1,203,201,206,207,-1,205,202,203,207,-1,208,204,205,207,-1,212,209,214,213,-1,210,195,198,211,-1,198,171,189,211,-1,170,212,213,193,-1,213,211,189,193,-1,214};
			return value;
		}
		private int[] getIndexedFaceSet_9_32_coordIndex_2()
		{
			int[] value = {210,211,213,-1,209,215,217,214,-1,216,201,195,210,-1,217,216,210,214,-1,218,194,206,219,-1,206,201,216,219,-1,215,220,221,217,-1,221,219,216,217,-1,222,218,219,221,-1};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_9_32_texCoordIndex_1()
		{
			int[] value = {0,1,2,3,-1,4,5,6,7,-1,8,9,10,11,-1,12,13,14,15,-1,16,17,18,19,-1,20,21,22,23,-1,24,25,26,-1,27,28,24,-1,29,30,20,23,-1,28,29,23,24,-1,22,25,24,23,-1,31,32,33,-1,34,25,33,-1,21,16,19,22,-1,19,33,25,22,-1,18,31,33,19,-1,35,36,37,38,-1,39,40,21,20,-1,30,41,39,20,-1,42,43,35,38,-1,41,42,38,39,-1,37,40,39,38,-1,44,17,16,45,-1,16,21,40,45,-1,36,12,15,37,-1,15,45,40,37,-1,14,44,45,15,-1,46,47,48,49,-1,50,51,52,53,-1,54,55,56,-1,57,31,55,-1,18,17,50,53,-1,31,18,53,55,-1,52,56,55,53,-1,52,51,58,59,-1,60,56,61,-1,56,52,59,61,-1,62,63,64,-1,65,61,64,-1,59,58,49,48,-1,64,61,59,48,-1,47,62,64,48,-1,66,67,68,69,-1,70,51,50,71,-1,50,17,44,71,-1,13,66,69,14,-1,69,71,44,14,-1,68,70,71,69,-1,67,72,73,68,-1,74,58,51,70,-1,73,74,70,68,-1,75,46,49,76,-1,49,58,74,76,-1,72,8,11,73,-1,11,76,74,73,-1,10,75,76,11,-1,77,78,79,80,-1,81,82,83,84,-1,85,86,87,88,-1,89,90,91,-1,92,62,90,-1,47,46,85,88,-1,62,47,88,90,-1,87,91,90,88,-1,93,94,95,-1,96,91,95,-1,87,86,84,83,-1,95,91,87,83,-1,82,93,95,83,-1,97,98,99,100,-1,101,86,85,102,-1,85,46,75,102,-1,9,97,100,10,-1,100,102,75,10,-1,99,101,102,100,-1,103,81,84,104,-1,84,86,101,104,-1,98,77,80,99,-1,80,104,101,99,-1,79,103,104,80,-1,105,106,107,108,-1,109,110,111,112,-1,113,114,115,-1,116,93,114,-1,82,81,109,112,-1,93,82,112,114,-1,111,115,114,112,-1,111,110,117,118,-1,119,115,120,-1,115,111,118,120,-1,121,122,123,-1,124,120,123,-1,118,117,108,107,-1,123,120,118,107,-1,106,121,123,107,-1,125,126,127,128,-1,129,110,109,130,-1,109,81,103,130,-1,78,125,128,79,-1,128,130,103,79,-1,127,129,130,128,-1,126,131,132,127,-1,133,117,110,129,-1,132,133,129,127,-1,134,105,108,135,-1,108,117,133,135,-1,131,4,7,132,-1,7,135,133,132,-1,6,134,135,7,-1,136,137,138,139,-1,140,141,142,143,-1,144,145,146,147,-1,148,149,150,151,-1,152,153,154,-1,155,121,153,-1,106,105,148,151,-1,121,106,151,153,-1,150,154,153,151,-1,156,157,158,-1,159,154,158,-1,150,149,147,146,-1,158,154,150,146,-1,145,156,158,146,-1,160,161,162,163,-1,164,149,148,165,-1,148,105,134,165,-1,5,160,163,6,-1,163,165,134,6,-1,162,164,165,163,-1,166,144,147,167,-1,147,149,164,167,-1,161,140,143,162,-1,143,167,164,162,-1,142,166,167,143,-1,168,169,170,171,-1,172,173,174,175,-1,176,177,178,-1,179,156,177,-1,145,144,172,175,-1,156,145,175,177,-1,174,178,177,175,-1,174,173,180,181,-1,182,178,183,-1,178,174,181,183,-1,184,185,186,-1,187,183,186,-1,181,180,171,170,-1,186,183,181,170,-1,169,184,186,170,-1,188,189,190,191,-1,192,173,172,193,-1,172,144,166,193,-1,141,188,191,142,-1,191,193,166,142,-1,190,192,193,191,-1,189,194,195,190,-1,196,180,173,192,-1,195,196,192,190,-1,197,168,171,198,-1,171,180,196,198,-1,194,136,139,195,-1,139,198,196,195,-1,138,197,198,139,-1,199,200,201,202,-1,203,204,205,206,-1,207,208,209,210,-1,211,212,213,-1,214,184,212,-1,169,168,207,210,-1,184,169,210,212,-1,209,213,212,210,-1,215,216,217,-1,218,213,217,-1,209,208,206,205,-1,217,213,209,205,-1,204,215,217,205,-1,219,220,221,222,-1,223,208,207,224,-1,207,168,197,224,-1,137,219,222,138,-1,222,224,197,138,-1,221,223,224,222,-1,225,203,206,226,-1,206,208,223,226,-1,220,199,202,221,-1,202,226,223,221,-1,201,225,226,202,-1,227,228,229,230,-1,231,232,233,234,-1,235,236,237,-1,238,215,236,-1,204,203,231,234,-1,215,204,234,236,-1,233,237,236,234,-1,233,232,239,240,-1,241,237,242,-1,237,233,240,242,-1,243,244,245,-1,246,242,245,-1,240,239,230,229,-1,245,242,240,229,-1,228,243,245,229,-1,247,248,249,250,-1,251,232,231,252,-1,231,203,225,252,-1,200,247,250,201,-1,250,252,225,201,-1,249};
			return value;
		}
		private int[] getIndexedFaceSet_9_32_texCoordIndex_2()
		{
			int[] value = {251,252,250,-1,248,253,254,249,-1,255,239,232,251,-1,254,255,251,249,-1,256,227,230,257,-1,230,239,255,257,-1,253,0,3,254,-1,3,257,255,254,-1,2,256,257,3,-1};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getsfishp2GeoPoints_10_32_point_1()
		{
			double[] value = {0.15,0.0,10.469,0.424,-0.212,0.567,-0.424,-0.212,0.567,0.0,1.114,0.067,1.667,-0.0,2.313,1.133,-0.405,1.585,0.455,-0.655,5.956,0.801,-0.922,5.982,0.502,-0.789,5.98,0.616,-0.172,8.401,0.568,-0.302,8.411,0.581,-0.233,8.406,0.471,-0.723,5.97,0.641,-0.477,7.015,0.621,-0.551,7.026,0.623,-0.63,7.034,0.731,-0.424,8.414,0.611,-0.369,8.414,0.602,-0.856,5.984,0.698,-0.708,7.038,0.873,-0.777,7.037,0.675,-0.245,0.954,0.271,-0.535,4.844,0.379,-0.659,4.884,0.319,-0.599,4.867,0.543,-0.189,0.761,0.223,-0.297,3.212,0.303,-0.341,3.28,0.394,-0.4,3.344,0.723,-0.783,4.91,0.504,-0.72,4.897,0.863,-0.332,1.215,0.546,-0.468,3.425,0.788,-0.533,3.534,1.248,-0.525,5.971,1.248,-0.961,5.971,1.026,-0.443,8.411,0.888,-0.453,8.413,1.042,-0.965,5.977,1.095,-0.818,7.033,1.286,-0.809,7.028,1.353,-0.888,5.967,1.097,-0.383,8.409,1.385,-0.732,7.025,1.026,-0.136,8.411,1.096,-0.278,8.409,1.351,-0.742,5.967,1.383,-0.59,7.025,1.286,-0.389,7.028,1.667,-0.436,2.313,1.195,-0.825,4.928,0.979,-0.827,4.92,1.427,-0.444,1.986,1.063,-0.575,3.651,1.291,-0.572,3.746,1.791,-0.367,2.48,1.305,-0.755,4.931,1.407,-0.504,3.794,1.195,-0.389,4.928,1.303,-0.611,4.931,1.789,-0.224,2.477,1.405,-0.36,3.793,1.291,-0.136,3.746,0.617,1.016,0.853,0.427,0.448,5.977,0.826,0.045,5.984,0.745,0.2,8.415,0.897,0.031,8.413,1.058,-0.246,5.978,1.108,-0.141,7.033,0.894,0.113,7.038,0.526,0.439,8.41,0.611,0.343,8.414,0.602,0.29,5.984,0.698,0.329,7.038,0.559,0.471,7.032,1.152,0.619,1.62,0.75,0.211,4.912,0.997,-0.097,4.922,1.439,0.302,2.008,1.08,0.163,3.659,0.814,0.477,3.546,0.299,0.629,4.876,0.504,0.469,4.897,0.863,0.876,1.215,0.546,0.738,3.425,0.317,0.891,3.311,0.031,0.622,5.952,0.207,0.577,5.955,0.444,0.53,8.4,0.478,0.497,8.405,0.3,0.534,5.965,0.469,0.553,7.023,0.404,0.597,7.014,0.136,0.603,5.951,0.406,0.549,8.399,0.345,0.623,7.011,0.318,0.563,8.399,0.363,0.56,8.398,0.08,0.617,5.951};
			return value;
		}
		private double[] getsfishp2GeoPoints_10_32_point_2()
		{
			double[] value = {0.288,0.637,7.011,0.232,0.642,7.012,0.27,1.08,0.323,0.024,0.748,4.834,0.141,0.71,4.853,0.421,1.067,0.552,0.135,0.961,3.214,-0.0,0.988,3.139,0.157,1.093,0.172,-0.056,0.771,4.825,-0.093,1.008,3.091,-0.153,0.79,4.822,-0.111,0.785,4.822,0.072,1.108,0.091,-0.155,1.022,3.067,-0.201,1.028,3.061,-1.667,-0.0,2.313,-0.421,1.067,0.552,-0.237,0.534,5.965,-0.074,0.603,5.951,0.229,0.549,8.399,0.272,0.56,8.398,-0.018,0.617,5.951,0.176,0.637,7.011,0.12,0.623,7.011,0.157,0.497,8.405,0.191,0.53,8.4,-0.144,0.577,5.955,0.061,0.597,7.014,-0.0040,0.553,7.023,-0.157,1.093,0.172,-0.25,0.771,4.825,-0.195,0.785,4.822,-0.072,1.108,0.091,-0.248,1.022,3.067,-0.31,1.008,3.091,-0.446,0.71,4.853,-0.33,0.748,4.834,-0.27,1.08,0.323,-0.403,0.988,3.139,-0.538,0.961,3.214,-1.186,-0.525,5.971,-0.539,0.29,5.984,0.024,0.343,8.414,0.109,0.439,8.41,-0.365,0.448,5.977,-0.095,0.471,7.032,-0.233,0.329,7.038,-0.763,0.045,5.984,-0.11,0.2,8.415,-0.43,0.113,7.038,-0.391,-0.136,8.411,-0.262,0.031,8.413,-0.996,-0.246,5.978,-0.644,-0.141,7.033,-0.822,-0.389,7.028,-0.863,0.876,1.215,-0.809,0.469,4.897,-0.604,0.629,4.876,-0.617,1.016,0.853,-0.72,0.891,3.311,-0.949,0.738,3.425,-1.152,0.619,1.62,-1.055,0.211,4.912,-1.217,0.477,3.546,-1.501,-0.389,4.928,-1.302,-0.097,4.922,-1.439,0.302,2.008,-1.482,0.163,3.659,-1.694,-0.136,3.746,-1.427,-0.444,1.986,-0.98,-0.965,5.977,-1.291,-0.888,5.967,-0.462,-0.383,8.409,-0.461,-0.278,8.409,-1.289,-0.742,5.967,-0.919,-0.59,7.025,-0.92,-0.732,7.025,-0.253,-0.453,8.413,-0.391,-0.443,8.411,-1.186,-0.961,5.971,-0.822,-0.809,7.028,-0.63,-0.818,7.033,-1.791,-0.367,2.48,-1.611,-0.755,4.931,-1.609,-0.611,4.931,-1.789,-0.224,2.477,-1.808,-0.36,3.793,-1.81,-0.504,3.794,-1.285,-0.827,4.92,-1.501,-0.825,4.928,-1.667,-0.436,2.313,-1.694,-0.572,3.746,-1.466,-0.575,3.651,-0.393,-0.655,5.956,-0.539,-0.856,5.984,0.024,-0.369,8.414,-0.096,-0.424,8.414,-0.738,-0.922,5.982,-0.409,-0.777,7.037};
			return value;
		}
		private double[] getsfishp2GeoPoints_10_32_point_3()
		{
			double[] value = {-0.233,-0.708,7.038,-0.44,-0.789,5.98,0.067,-0.302,8.411,-0.159,-0.63,7.034,0.019,-0.172,8.401,0.054,-0.233,8.406,-0.408,-0.723,5.97,-0.156,-0.551,7.026,-0.176,-0.477,7.015,-0.863,-0.332,1.215,-0.809,-0.72,4.897,-1.028,-0.783,4.91,-1.133,-0.405,1.585,-1.191,-0.533,3.534,-0.949,-0.468,3.425,-0.675,-0.245,0.954,-0.685,-0.659,4.884,-0.796,-0.4,3.344,-0.577,-0.535,4.844,-0.625,-0.599,4.867,-0.543,-0.189,0.761,-0.705,-0.341,3.28,-0.625,-0.297,3.212};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getTextureCoordinate_10_33_point_1()
		{
			double[] value = {1.0,0.972222,1.0,1.0,0.833333,1.0,0.833333,0.972222,1.0,0.472222,1.0,0.5,0.833333,0.5,0.833333,0.472222,1.0,0.222222,1.0,0.25,0.833333,0.25,0.833333,0.222222,1.0,0.083333,1.0,0.111111,0.833333,0.111111,0.833333,0.083333,0.5,0.083333,0.5,0.111111,0.333333,0.111111,0.333333,0.083333,0.5,0.027778,0.5,0.055556,0.333333,0.055556,0.333333,0.027778,0.166667,0.027778,0.166667,0.055556,0.0,0.027778,0.0,0.0,0.166667,0.0,0.333333,0.0,0.5,0.0,0.166667,0.111111,0.0,0.083333,0.166667,0.083333,0.0,0.055556,1.0,0.027778,1.0,0.055556,0.833333,0.055556,0.833333,0.027778,0.666667,0.027778,0.666667,0.055556,0.666667,0.0,0.833333,0.0,1.0,0.0,0.666667,0.111111,0.666667,0.083333,0.5,0.25,0.333333,0.25,0.333333,0.222222,0.5,0.222222,0.5,0.138889,0.5,0.166667,0.333333,0.166667,0.333333,0.138889,0.0,0.138889,0.166667,0.138889,0.166667,0.166667,0.0,0.111111,0.5,0.194444,0.333333,0.194444,0.0,0.166667,0.166667,0.194444,0.166667,0.25,0.0,0.222222,0.166667,0.222222,0.0,0.194444,1.0,0.138889,1.0,0.166667,0.833333,0.166667,0.833333,0.138889,0.666667,0.166667,0.666667,0.138889,1.0,0.194444,0.833333,0.194444,0.666667,0.194444,0.666667,0.25,0.666667,0.222222,1.0,0.333333,1.0,0.361111,0.833333,0.361111,0.833333,0.333333,0.5,0.361111,0.333333,0.361111,0.333333,0.333333,0.5,0.333333,0.5,0.277778,0.5,0.305556,0.333333,0.305556,0.333333,0.277778,0.0,0.277778,0.166667,0.277778,0.166667,0.305556,0.0,0.25,0.166667,0.361111,0.0,0.333333,0.166667,0.333333,0.0,0.305556,1.0,0.277778,1.0,0.305556,0.833333,0.305556};
			return value;
		}
		private double[] getTextureCoordinate_10_33_point_2()
		{
			double[] value = {0.833333,0.277778,0.666667,0.305556,0.666667,0.277778,0.666667,0.361111,0.666667,0.333333,0.5,0.5,0.333333,0.5,0.333333,0.472222,0.5,0.472222,0.5,0.388889,0.5,0.416667,0.333333,0.416667,0.333333,0.388889,0.0,0.388889,0.166667,0.388889,0.166667,0.416667,0.0,0.361111,0.5,0.444444,0.333333,0.444444,0.0,0.416667,0.166667,0.444444,0.166667,0.5,0.0,0.472222,0.166667,0.472222,0.0,0.444444,1.0,0.388889,1.0,0.416667,0.833333,0.416667,0.833333,0.388889,0.666667,0.416667,0.666667,0.388889,1.0,0.444444,0.833333,0.444444,0.666667,0.444444,0.666667,0.5,0.666667,0.472222,1.0,0.722222,1.0,0.75,0.833333,0.75,0.833333,0.722222,1.0,0.583333,1.0,0.611111,0.833333,0.611111,0.833333,0.583333,0.5,0.611111,0.333333,0.611111,0.333333,0.583333,0.5,0.583333,0.5,0.527778,0.5,0.555556,0.333333,0.555556,0.333333,0.527778,0.0,0.527778,0.166667,0.527778,0.166667,0.555556,0.0,0.5,0.166667,0.611111,0.0,0.583333,0.166667,0.583333,0.0,0.555556,1.0,0.527778,1.0,0.555556,0.833333,0.555556,0.833333,0.527778,0.666667,0.555556,0.666667,0.527778,0.666667,0.611111,0.666667,0.583333,0.5,0.75,0.333333,0.75,0.333333,0.722222,0.5,0.722222,0.5,0.638889,0.5,0.666667,0.333333,0.666667,0.333333,0.638889,0.0,0.638889,0.166667,0.638889,0.166667,0.666667,0.0,0.611111,0.5,0.694444,0.333333,0.694444,0.0,0.666667,0.166667,0.694444,0.166667,0.75,0.0,0.722222,0.166667,0.722222,0.0,0.694444,1.0,0.638889,1.0,0.666667,0.833333,0.666667,0.833333,0.638889,0.666667,0.666667,0.666667,0.638889,1.0,0.694444,0.833333,0.694444,0.666667,0.694444,0.666667,0.75,0.666667,0.722222,1.0,0.833333};
			return value;
		}
		private double[] getTextureCoordinate_10_33_point_3()
		{
			double[] value = {1.0,0.861111,0.833333,0.861111,0.833333,0.833333,0.5,0.861111,0.333333,0.861111,0.333333,0.833333,0.5,0.833333,0.5,0.777778,0.5,0.805556,0.333333,0.805556,0.333333,0.777778,0.0,0.777778,0.166667,0.777778,0.166667,0.805556,0.0,0.75,0.166667,0.861111,0.0,0.833333,0.166667,0.833333,0.0,0.805556,1.0,0.777778,1.0,0.805556,0.833333,0.805556,0.833333,0.777778,0.666667,0.805556,0.666667,0.777778,0.666667,0.861111,0.666667,0.833333,0.5,1.0,0.333333,1.0,0.333333,0.972222,0.5,0.972222,0.5,0.888889,0.5,0.916667,0.333333,0.916667,0.333333,0.888889,0.0,0.888889,0.166667,0.888889,0.166667,0.916667,0.0,0.861111,0.5,0.944444,0.333333,0.944444,0.0,0.916667,0.166667,0.944444,0.166667,1.0,0.0,0.972222,0.166667,0.972222,0.0,0.944444,1.0,0.888889,1.0,0.916667,0.833333,0.916667,0.833333,0.888889,0.666667,0.916667,0.666667,0.888889,1.0,0.944444,0.833333,0.944444,0.666667,0.944444,0.666667,1.0,0.666667,0.972222};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_9_39_coordIndex_1()
		{
			int[] value = {220,2,222,221,-1,113,3,115,114,-1,60,4,62,61,-1,31,5,33,32,-1,18,7,20,19,-1,12,8,15,14,-1,11,10,0,-1,0,9,11,-1,13,6,12,14,-1,9,13,14,11,-1,15,10,11,14,-1,16,0,17,-1,0,10,17,-1,8,18,19,15,-1,19,17,10,15,-1,20,16,17,19,-1,25,21,28,27,-1,24,23,8,12,-1,6,22,24,12,-1,26,1,25,27,-1,22,26,27,24,-1,28,23,24,27,-1,29,7,18,30,-1,18,8,23,30,-1,21,31,32,28,-1,32,30,23,28,-1,33,29,30,32,-1,34,48,47,46,-1,38,35,40,39,-1,0,37,36,-1,0,16,37,-1,20,7,38,39,-1,16,20,39,37,-1,40,36,37,39,-1,40,35,41,43,-1,0,36,42,-1,36,40,43,42,-1,44,0,45,-1,0,42,45,-1,43,41,46,47,-1,45,42,43,47,-1,48,44,45,47,-1,52,49,54,53,-1,50,35,38,51,-1,38,7,29,51,-1,5,52,53,33,-1,53,51,29,33,-1,54,50,51,53,-1,49,55,57,54,-1,56,41,35,50,-1,57,56,50,54,-1,58,34,46,59,-1,46,41,56,59,-1,55,60,61,57,-1,61,59,56,57,-1,62,58,59,61,-1,84,63,86,85,-1,64,75,74,73,-1,68,65,70,69,-1,0,67,66,-1,0,44,67,-1,48,34,68,69,-1,44,48,69,67,-1,70,66,67,69,-1,71,0,72,-1,0,66,72,-1,70,65,73,74,-1,72,66,70,74,-1,75,71,72,74,-1,79,76,81,80,-1,77,65,68,78,-1,68,34,58,78,-1,4,79,80,62,-1,80,78,58,62,-1,81,77,78,80,-1,82,64,73,83,-1,73,65,77,83,-1,76,84,85,81,-1,85,83,77,81,-1,86,82,83,85,-1,87,101,100,99,-1,91,88,93,92,-1,0,90,89,-1,0,71,90,-1,75,64,91,92,-1,71,75,92,90,-1,93,89,90,92,-1,93,88,94,96,-1,0,89,95,-1,89,93,96,95,-1,97,0,98,-1,0,95,98,-1,96,94,99,100,-1,98,95,96,100,-1,101,97,98,100,-1,105,102,107,106,-1,103,88,91,104,-1,91,64,82,104,-1,63,105,106,86,-1,106,104,82,86,-1,107,103,104,106,-1,102,108,110,107,-1,109,94,88,103,-1,110,109,103,107,-1,111,87,99,112,-1,99,94,109,112,-1,108,113,114,110,-1,114,112,109,110,-1,115,111,112,114,-1,167,116,169,168,-1,138,117,140,139,-1,118,129,128,127,-1,122,119,124,123,-1,0,121,120,-1,0,97,121,-1,101,87,122,123,-1,97,101,123,121,-1,124,120,121,123,-1,125,0,126,-1,0,120,126,-1,124,119,127,128,-1,126,120,124,128,-1,129,125,126,128,-1,133,130,135,134,-1,131,119,122,132,-1,122,87,111,132,-1,3,133,134,115,-1,134,132,111,115,-1,135,131,132,134,-1,136,118,127,137,-1,127,119,131,137,-1,130,138,139,135,-1,139,137,131,135,-1,140,136,137,139,-1,141,155,154,153,-1,145,142,147,146,-1,0,144,143,-1,0,125,144,-1,129,118,145,146,-1,125,129,146,144,-1,147,143,144,146,-1,147,142,148,150,-1,0,143,149,-1,143,147,150,149,-1,151,0,152,-1,0,149,152,-1,150,148,153,154,-1,152,149,150,154,-1,155,151,152,154,-1,159,156,161,160,-1,157,142,145,158,-1,145,118,136,158,-1,117,159,160,140,-1,160,158,136,140,-1,161,157,158,160,-1,156,162,164,161,-1,163,148,142,157,-1,164,163,157,161,-1,165,141,153,166,-1,153,148,163,166,-1,162,167,168,164,-1,168,166,163,164,-1,169,165,166,168,-1,191,170,193,192,-1,171,182,181,180,-1,175,172,177,176,-1,0,174,173,-1,0,151,174,-1,155,141,175,176,-1,151,155,176,174,-1,177,173,174,176,-1,178,0,179,-1,0,173,179,-1,177,172,180,181,-1,179,173,177,181,-1,182,178,179,181,-1,186,183,188,187,-1,184,172,175,185,-1,175,141,165,185,-1,116,186,187,169,-1,187,185,165,169,-1,188,184,185,187,-1,189,171,180,190,-1,180,172,184,190,-1,183,191,192,188,-1,192,190,184,188,-1,193,189,190,192,-1,194,208,207,206,-1,198,195,200,199,-1,0,197,196,-1,0,178,197,-1,182,171,198,199,-1,178,182,199,197,-1,200,196,197,199,-1,200,195,201,203,-1,0,196,202,-1,196,200,203,202,-1,204,0,205,-1,0,202,205,-1,203,201,206,207,-1,205,202,203,207,-1,208,204,205,207,-1,212,209,214,213,-1,210,195,198,211,-1,198,171,189,211,-1,170,212,213,193,-1,213,211,189,193,-1,214};
			return value;
		}
		private int[] getIndexedFaceSet_9_39_coordIndex_2()
		{
			int[] value = {210,211,213,-1,209,215,217,214,-1,216,201,195,210,-1,217,216,210,214,-1,218,194,206,219,-1,206,201,216,219,-1,215,220,221,217,-1,221,219,216,217,-1,222,218,219,221,-1};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_9_39_texCoordIndex_1()
		{
			int[] value = {0,1,2,3,-1,4,5,6,7,-1,8,9,10,11,-1,12,13,14,15,-1,16,17,18,19,-1,20,21,22,23,-1,24,25,26,-1,27,28,24,-1,29,30,20,23,-1,28,29,23,24,-1,22,25,24,23,-1,31,32,33,-1,34,25,33,-1,21,16,19,22,-1,19,33,25,22,-1,18,31,33,19,-1,35,36,37,38,-1,39,40,21,20,-1,30,41,39,20,-1,42,43,35,38,-1,41,42,38,39,-1,37,40,39,38,-1,44,17,16,45,-1,16,21,40,45,-1,36,12,15,37,-1,15,45,40,37,-1,14,44,45,15,-1,46,47,48,49,-1,50,51,52,53,-1,54,55,56,-1,57,31,55,-1,18,17,50,53,-1,31,18,53,55,-1,52,56,55,53,-1,52,51,58,59,-1,60,56,61,-1,56,52,59,61,-1,62,63,64,-1,65,61,64,-1,59,58,49,48,-1,64,61,59,48,-1,47,62,64,48,-1,66,67,68,69,-1,70,51,50,71,-1,50,17,44,71,-1,13,66,69,14,-1,69,71,44,14,-1,68,70,71,69,-1,67,72,73,68,-1,74,58,51,70,-1,73,74,70,68,-1,75,46,49,76,-1,49,58,74,76,-1,72,8,11,73,-1,11,76,74,73,-1,10,75,76,11,-1,77,78,79,80,-1,81,82,83,84,-1,85,86,87,88,-1,89,90,91,-1,92,62,90,-1,47,46,85,88,-1,62,47,88,90,-1,87,91,90,88,-1,93,94,95,-1,96,91,95,-1,87,86,84,83,-1,95,91,87,83,-1,82,93,95,83,-1,97,98,99,100,-1,101,86,85,102,-1,85,46,75,102,-1,9,97,100,10,-1,100,102,75,10,-1,99,101,102,100,-1,103,81,84,104,-1,84,86,101,104,-1,98,77,80,99,-1,80,104,101,99,-1,79,103,104,80,-1,105,106,107,108,-1,109,110,111,112,-1,113,114,115,-1,116,93,114,-1,82,81,109,112,-1,93,82,112,114,-1,111,115,114,112,-1,111,110,117,118,-1,119,115,120,-1,115,111,118,120,-1,121,122,123,-1,124,120,123,-1,118,117,108,107,-1,123,120,118,107,-1,106,121,123,107,-1,125,126,127,128,-1,129,110,109,130,-1,109,81,103,130,-1,78,125,128,79,-1,128,130,103,79,-1,127,129,130,128,-1,126,131,132,127,-1,133,117,110,129,-1,132,133,129,127,-1,134,105,108,135,-1,108,117,133,135,-1,131,4,7,132,-1,7,135,133,132,-1,6,134,135,7,-1,136,137,138,139,-1,140,141,142,143,-1,144,145,146,147,-1,148,149,150,151,-1,152,153,154,-1,155,121,153,-1,106,105,148,151,-1,121,106,151,153,-1,150,154,153,151,-1,156,157,158,-1,159,154,158,-1,150,149,147,146,-1,158,154,150,146,-1,145,156,158,146,-1,160,161,162,163,-1,164,149,148,165,-1,148,105,134,165,-1,5,160,163,6,-1,163,165,134,6,-1,162,164,165,163,-1,166,144,147,167,-1,147,149,164,167,-1,161,140,143,162,-1,143,167,164,162,-1,142,166,167,143,-1,168,169,170,171,-1,172,173,174,175,-1,176,177,178,-1,179,156,177,-1,145,144,172,175,-1,156,145,175,177,-1,174,178,177,175,-1,174,173,180,181,-1,182,178,183,-1,178,174,181,183,-1,184,185,186,-1,187,183,186,-1,181,180,171,170,-1,186,183,181,170,-1,169,184,186,170,-1,188,189,190,191,-1,192,173,172,193,-1,172,144,166,193,-1,141,188,191,142,-1,191,193,166,142,-1,190,192,193,191,-1,189,194,195,190,-1,196,180,173,192,-1,195,196,192,190,-1,197,168,171,198,-1,171,180,196,198,-1,194,136,139,195,-1,139,198,196,195,-1,138,197,198,139,-1,199,200,201,202,-1,203,204,205,206,-1,207,208,209,210,-1,211,212,213,-1,214,184,212,-1,169,168,207,210,-1,184,169,210,212,-1,209,213,212,210,-1,215,216,217,-1,218,213,217,-1,209,208,206,205,-1,217,213,209,205,-1,204,215,217,205,-1,219,220,221,222,-1,223,208,207,224,-1,207,168,197,224,-1,137,219,222,138,-1,222,224,197,138,-1,221,223,224,222,-1,225,203,206,226,-1,206,208,223,226,-1,220,199,202,221,-1,202,226,223,221,-1,201,225,226,202,-1,227,228,229,230,-1,231,232,233,234,-1,235,236,237,-1,238,215,236,-1,204,203,231,234,-1,215,204,234,236,-1,233,237,236,234,-1,233,232,239,240,-1,241,237,242,-1,237,233,240,242,-1,243,244,245,-1,246,242,245,-1,240,239,230,229,-1,245,242,240,229,-1,228,243,245,229,-1,247,248,249,250,-1,251,232,231,252,-1,231,203,225,252,-1,200,247,250,201,-1,250,252,225,201,-1,249};
			return value;
		}
		private int[] getIndexedFaceSet_9_39_texCoordIndex_2()
		{
			int[] value = {251,252,250,-1,248,253,254,249,-1,255,239,232,251,-1,254,255,251,249,-1,256,227,230,257,-1,230,239,255,257,-1,253,0,3,254,-1,3,257,255,254,-1,2,256,257,3,-1};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getsfishp3GeoPoints_10_39_point_1()
		{
			double[] value = {0.0,0.0,10.0,0.416,-0.212,0.573,-0.424,-0.212,0.567,-0.0070,1.114,0.072,1.676,-0.0,2.307,1.145,-0.405,1.576,0.662,-0.02,6.06,1.008,-0.286,6.086,0.709,-0.154,6.084,0.219,-0.032,8.338,0.171,-0.162,8.349,0.185,-0.093,8.344,0.678,-0.088,6.074,0.479,-0.056,7.09,0.46,-0.129,7.101,0.462,-0.208,7.11,0.335,-0.284,8.352,0.214,-0.229,8.352,0.809,-0.221,6.089,0.537,-0.286,7.114,0.712,-0.356,7.112,0.687,-0.245,0.945,0.682,0.083,4.985,0.79,-0.041,5.024,0.73,0.019,5.007,0.55,-0.189,0.757,0.576,0.089,3.349,0.66,0.046,3.415,0.753,-0.014,3.478,1.134,-0.165,5.05,0.915,-0.102,5.037,0.876,-0.332,1.206,0.906,-0.081,3.558,1.148,-0.146,3.667,1.455,0.111,6.075,1.455,-0.326,6.075,0.629,-0.303,8.348,0.492,-0.313,8.35,1.249,-0.33,6.081,0.934,-0.397,7.108,1.125,-0.387,7.103,1.56,-0.252,6.071,0.7,-0.243,8.347,1.224,-0.311,7.101,0.629,0.0040,8.348,0.699,-0.138,8.347,1.558,-0.106,6.071,1.222,-0.169,7.101,1.125,0.033,7.103,1.676,-0.436,2.307,1.606,-0.207,5.068,1.391,-0.208,5.061,1.437,-0.444,1.978,1.422,-0.189,3.785,1.649,-0.186,3.88,1.798,-0.367,2.475,1.716,-0.137,5.071,1.765,-0.117,3.929,1.606,0.23,5.068,1.714,0.0070,5.071,1.796,-0.224,2.472,1.763,0.026,3.928,1.649,0.25,3.88,0.619,1.016,0.852,0.634,1.084,6.081,1.033,0.68,6.088,0.348,0.34,8.352,0.5,0.171,8.35,1.265,0.389,6.082,0.947,0.28,7.109,0.733,0.535,7.113,0.129,0.58,8.348,0.214,0.483,8.352,0.809,0.926,6.089,0.537,0.75,7.114,0.398,0.893,7.107,1.168,0.619,1.608,1.161,0.829,5.053,1.408,0.522,5.062,1.452,0.302,1.999,1.439,0.549,3.792,1.175,0.864,3.678,0.71,1.248,5.016,0.915,1.088,5.037,0.876,0.876,1.206,0.906,1.124,3.558,0.673,1.278,3.447,0.238,1.257,6.056,0.414,1.212,6.059,0.048,0.67,8.338,0.081,0.637,8.342,0.507,1.169,6.069,0.308,0.974,7.098,0.242,1.018,7.09,0.343,1.238,6.055,0.01,0.69,8.336,0.184,1.044,7.086,-0.079,0.703,8.336,-0.033,0.7,8.336,0.287,1.253,6.055};
			return value;
		}
		private double[] getsfishp3GeoPoints_10_39_point_2()
		{
			double[] value = {0.127,1.059,7.086,0.071,1.063,7.087,0.247,1.08,0.34,0.434,1.366,4.976,0.551,1.329,4.994,0.408,1.067,0.561,0.487,1.347,3.352,0.349,1.375,3.28,0.135,1.093,0.188,0.354,1.389,4.966,0.257,1.394,3.232,0.258,1.409,4.962,0.3,1.404,4.963,0.057,1.108,0.102,0.197,1.408,3.207,0.152,1.414,3.198,-1.667,-0.0,2.313,-0.421,1.067,0.552,-0.03,1.169,6.069,0.133,1.238,6.055,-0.168,0.69,8.336,-0.125,0.7,8.336,0.189,1.253,6.055,0.015,1.059,7.086,-0.042,1.044,7.086,-0.239,0.637,8.342,-0.205,0.67,8.338,0.063,1.212,6.059,-0.1,1.018,7.09,-0.165,0.974,7.098,-0.158,1.093,0.172,0.161,1.389,4.965,0.216,1.404,4.962,-0.074,1.108,0.092,0.107,1.408,3.204,0.046,1.394,3.227,-0.036,1.329,4.993,0.081,1.366,4.975,-0.27,1.08,0.323,-0.047,1.375,3.275,-0.182,1.347,3.35,-0.978,0.111,6.075,-0.332,0.926,6.089,-0.372,0.483,8.352,-0.287,0.58,8.348,-0.158,1.084,6.081,-0.256,0.893,7.107,-0.394,0.75,7.114,-0.556,0.68,6.088,-0.506,0.34,8.352,-0.591,0.535,7.113,-0.787,0.0040,8.348,-0.658,0.171,8.35,-0.789,0.389,6.082,-0.805,0.28,7.109,-0.983,0.033,7.103,-0.863,0.876,1.215,-0.398,1.088,5.038,-0.194,1.248,5.016,-0.617,1.016,0.853,-0.364,1.278,3.447,-0.593,1.124,3.561,-1.152,0.619,1.62,-0.644,0.829,5.053,-0.861,0.864,3.682,-1.09,0.23,5.068,-0.892,0.522,5.063,-1.439,0.302,2.008,-1.126,0.549,3.795,-1.338,0.25,3.882,-1.427,-0.444,1.986,-0.773,-0.33,6.081,-1.084,-0.252,6.071,-0.858,-0.243,8.347,-0.857,-0.138,8.347,-1.082,-0.106,6.071,-1.08,-0.169,7.101,-1.082,-0.311,7.101,-0.65,-0.313,8.35,-0.787,-0.303,8.348,-0.978,-0.326,6.075,-0.983,-0.387,7.103,-0.791,-0.397,7.108,-1.791,-0.367,2.48,-1.2,-0.137,5.072,-1.198,0.0070,5.071,-1.789,-0.224,2.477,-1.452,0.026,3.929,-1.454,-0.117,3.93,-0.874,-0.208,5.061,-1.09,-0.207,5.068,-1.667,-0.436,2.313,-1.338,-0.186,3.882,-1.11,-0.189,3.787,-0.186,-0.02,6.06,-0.332,-0.221,6.089,-0.372,-0.229,8.352,-0.493,-0.284,8.352,-0.531,-0.286,6.086,-0.57,-0.356,7.112};
			return value;
		}
		private double[] getsfishp3GeoPoints_10_39_point_3()
		{
			double[] value = {-0.394,-0.286,7.114,-0.232,-0.154,6.084,-0.329,-0.162,8.349,-0.32,-0.208,7.11,-0.377,-0.032,8.338,-0.343,-0.093,8.344,-0.201,-0.088,6.074,-0.318,-0.129,7.101,-0.337,-0.056,7.09,-0.863,-0.332,1.215,-0.398,-0.102,5.038,-0.618,-0.165,5.05,-1.133,-0.405,1.585,-0.835,-0.146,3.67,-0.593,-0.081,3.561,-0.675,-0.245,0.954,-0.274,-0.041,5.024,-0.441,-0.014,3.48,-0.166,0.083,4.985,-0.214,0.019,5.007,-0.543,-0.189,0.761,-0.349,0.046,3.416,-0.27,0.089,3.348};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getTextureCoordinate_10_40_point_1()
		{
			double[] value = {1.0,0.972222,1.0,1.0,0.833333,1.0,0.833333,0.972222,1.0,0.472222,1.0,0.5,0.833333,0.5,0.833333,0.472222,1.0,0.222222,1.0,0.25,0.833333,0.25,0.833333,0.222222,1.0,0.083333,1.0,0.111111,0.833333,0.111111,0.833333,0.083333,0.5,0.083333,0.5,0.111111,0.333333,0.111111,0.333333,0.083333,0.5,0.027778,0.5,0.055556,0.333333,0.055556,0.333333,0.027778,0.166667,0.027778,0.166667,0.055556,0.0,0.027778,0.0,0.0,0.166667,0.0,0.333333,0.0,0.5,0.0,0.166667,0.111111,0.0,0.083333,0.166667,0.083333,0.0,0.055556,1.0,0.027778,1.0,0.055556,0.833333,0.055556,0.833333,0.027778,0.666667,0.027778,0.666667,0.055556,0.666667,0.0,0.833333,0.0,1.0,0.0,0.666667,0.111111,0.666667,0.083333,0.5,0.25,0.333333,0.25,0.333333,0.222222,0.5,0.222222,0.5,0.138889,0.5,0.166667,0.333333,0.166667,0.333333,0.138889,0.0,0.138889,0.166667,0.138889,0.166667,0.166667,0.0,0.111111,0.5,0.194444,0.333333,0.194444,0.0,0.166667,0.166667,0.194444,0.166667,0.25,0.0,0.222222,0.166667,0.222222,0.0,0.194444,1.0,0.138889,1.0,0.166667,0.833333,0.166667,0.833333,0.138889,0.666667,0.166667,0.666667,0.138889,1.0,0.194444,0.833333,0.194444,0.666667,0.194444,0.666667,0.25,0.666667,0.222222,1.0,0.333333,1.0,0.361111,0.833333,0.361111,0.833333,0.333333,0.5,0.361111,0.333333,0.361111,0.333333,0.333333,0.5,0.333333,0.5,0.277778,0.5,0.305556,0.333333,0.305556,0.333333,0.277778,0.0,0.277778,0.166667,0.277778,0.166667,0.305556,0.0,0.25,0.166667,0.361111,0.0,0.333333,0.166667,0.333333,0.0,0.305556,1.0,0.277778,1.0,0.305556,0.833333,0.305556};
			return value;
		}
		private double[] getTextureCoordinate_10_40_point_2()
		{
			double[] value = {0.833333,0.277778,0.666667,0.305556,0.666667,0.277778,0.666667,0.361111,0.666667,0.333333,0.5,0.5,0.333333,0.5,0.333333,0.472222,0.5,0.472222,0.5,0.388889,0.5,0.416667,0.333333,0.416667,0.333333,0.388889,0.0,0.388889,0.166667,0.388889,0.166667,0.416667,0.0,0.361111,0.5,0.444444,0.333333,0.444444,0.0,0.416667,0.166667,0.444444,0.166667,0.5,0.0,0.472222,0.166667,0.472222,0.0,0.444444,1.0,0.388889,1.0,0.416667,0.833333,0.416667,0.833333,0.388889,0.666667,0.416667,0.666667,0.388889,1.0,0.444444,0.833333,0.444444,0.666667,0.444444,0.666667,0.5,0.666667,0.472222,1.0,0.722222,1.0,0.75,0.833333,0.75,0.833333,0.722222,1.0,0.583333,1.0,0.611111,0.833333,0.611111,0.833333,0.583333,0.5,0.611111,0.333333,0.611111,0.333333,0.583333,0.5,0.583333,0.5,0.527778,0.5,0.555556,0.333333,0.555556,0.333333,0.527778,0.0,0.527778,0.166667,0.527778,0.166667,0.555556,0.0,0.5,0.166667,0.611111,0.0,0.583333,0.166667,0.583333,0.0,0.555556,1.0,0.527778,1.0,0.555556,0.833333,0.555556,0.833333,0.527778,0.666667,0.555556,0.666667,0.527778,0.666667,0.611111,0.666667,0.583333,0.5,0.75,0.333333,0.75,0.333333,0.722222,0.5,0.722222,0.5,0.638889,0.5,0.666667,0.333333,0.666667,0.333333,0.638889,0.0,0.638889,0.166667,0.638889,0.166667,0.666667,0.0,0.611111,0.5,0.694444,0.333333,0.694444,0.0,0.666667,0.166667,0.694444,0.166667,0.75,0.0,0.722222,0.166667,0.722222,0.0,0.694444,1.0,0.638889,1.0,0.666667,0.833333,0.666667,0.833333,0.638889,0.666667,0.666667,0.666667,0.638889,1.0,0.694444,0.833333,0.694444,0.666667,0.694444,0.666667,0.75,0.666667,0.722222,1.0,0.833333};
			return value;
		}
		private double[] getTextureCoordinate_10_40_point_3()
		{
			double[] value = {1.0,0.861111,0.833333,0.861111,0.833333,0.833333,0.5,0.861111,0.333333,0.861111,0.333333,0.833333,0.5,0.833333,0.5,0.777778,0.5,0.805556,0.333333,0.805556,0.333333,0.777778,0.0,0.777778,0.166667,0.777778,0.166667,0.805556,0.0,0.75,0.166667,0.861111,0.0,0.833333,0.166667,0.833333,0.0,0.805556,1.0,0.777778,1.0,0.805556,0.833333,0.805556,0.833333,0.777778,0.666667,0.805556,0.666667,0.777778,0.666667,0.861111,0.666667,0.833333,0.5,1.0,0.333333,1.0,0.333333,0.972222,0.5,0.972222,0.5,0.888889,0.5,0.916667,0.333333,0.916667,0.333333,0.888889,0.0,0.888889,0.166667,0.888889,0.166667,0.916667,0.0,0.861111,0.5,0.944444,0.333333,0.944444,0.0,0.916667,0.166667,0.944444,0.166667,1.0,0.0,0.972222,0.166667,0.972222,0.0,0.944444,1.0,0.888889,1.0,0.916667,0.833333,0.916667,0.833333,0.888889,0.666667,0.916667,0.666667,0.888889,1.0,0.944444,0.833333,0.944444,0.666667,0.944444,0.666667,1.0,0.666667,0.972222};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_9_46_coordIndex_1()
		{
			int[] value = {220,2,222,221,-1,113,3,115,114,-1,60,4,62,61,-1,31,5,33,32,-1,18,7,20,19,-1,12,8,15,14,-1,11,10,0,-1,0,9,11,-1,13,6,12,14,-1,9,13,14,11,-1,15,10,11,14,-1,16,0,17,-1,0,10,17,-1,8,18,19,15,-1,19,17,10,15,-1,20,16,17,19,-1,25,21,28,27,-1,24,23,8,12,-1,6,22,24,12,-1,26,1,25,27,-1,22,26,27,24,-1,28,23,24,27,-1,29,7,18,30,-1,18,8,23,30,-1,21,31,32,28,-1,32,30,23,28,-1,33,29,30,32,-1,34,48,47,46,-1,38,35,40,39,-1,0,37,36,-1,0,16,37,-1,20,7,38,39,-1,16,20,39,37,-1,40,36,37,39,-1,40,35,41,43,-1,0,36,42,-1,36,40,43,42,-1,44,0,45,-1,0,42,45,-1,43,41,46,47,-1,45,42,43,47,-1,48,44,45,47,-1,52,49,54,53,-1,50,35,38,51,-1,38,7,29,51,-1,5,52,53,33,-1,53,51,29,33,-1,54,50,51,53,-1,49,55,57,54,-1,56,41,35,50,-1,57,56,50,54,-1,58,34,46,59,-1,46,41,56,59,-1,55,60,61,57,-1,61,59,56,57,-1,62,58,59,61,-1,84,63,86,85,-1,64,75,74,73,-1,68,65,70,69,-1,0,67,66,-1,0,44,67,-1,48,34,68,69,-1,44,48,69,67,-1,70,66,67,69,-1,71,0,72,-1,0,66,72,-1,70,65,73,74,-1,72,66,70,74,-1,75,71,72,74,-1,79,76,81,80,-1,77,65,68,78,-1,68,34,58,78,-1,4,79,80,62,-1,80,78,58,62,-1,81,77,78,80,-1,82,64,73,83,-1,73,65,77,83,-1,76,84,85,81,-1,85,83,77,81,-1,86,82,83,85,-1,87,101,100,99,-1,91,88,93,92,-1,0,90,89,-1,0,71,90,-1,75,64,91,92,-1,71,75,92,90,-1,93,89,90,92,-1,93,88,94,96,-1,0,89,95,-1,89,93,96,95,-1,97,0,98,-1,0,95,98,-1,96,94,99,100,-1,98,95,96,100,-1,101,97,98,100,-1,105,102,107,106,-1,103,88,91,104,-1,91,64,82,104,-1,63,105,106,86,-1,106,104,82,86,-1,107,103,104,106,-1,102,108,110,107,-1,109,94,88,103,-1,110,109,103,107,-1,111,87,99,112,-1,99,94,109,112,-1,108,113,114,110,-1,114,112,109,110,-1,115,111,112,114,-1,167,116,169,168,-1,138,117,140,139,-1,118,129,128,127,-1,122,119,124,123,-1,0,121,120,-1,0,97,121,-1,101,87,122,123,-1,97,101,123,121,-1,124,120,121,123,-1,125,0,126,-1,0,120,126,-1,124,119,127,128,-1,126,120,124,128,-1,129,125,126,128,-1,133,130,135,134,-1,131,119,122,132,-1,122,87,111,132,-1,3,133,134,115,-1,134,132,111,115,-1,135,131,132,134,-1,136,118,127,137,-1,127,119,131,137,-1,130,138,139,135,-1,139,137,131,135,-1,140,136,137,139,-1,141,155,154,153,-1,145,142,147,146,-1,0,144,143,-1,0,125,144,-1,129,118,145,146,-1,125,129,146,144,-1,147,143,144,146,-1,147,142,148,150,-1,0,143,149,-1,143,147,150,149,-1,151,0,152,-1,0,149,152,-1,150,148,153,154,-1,152,149,150,154,-1,155,151,152,154,-1,159,156,161,160,-1,157,142,145,158,-1,145,118,136,158,-1,117,159,160,140,-1,160,158,136,140,-1,161,157,158,160,-1,156,162,164,161,-1,163,148,142,157,-1,164,163,157,161,-1,165,141,153,166,-1,153,148,163,166,-1,162,167,168,164,-1,168,166,163,164,-1,169,165,166,168,-1,191,170,193,192,-1,171,182,181,180,-1,175,172,177,176,-1,0,174,173,-1,0,151,174,-1,155,141,175,176,-1,151,155,176,174,-1,177,173,174,176,-1,178,0,179,-1,0,173,179,-1,177,172,180,181,-1,179,173,177,181,-1,182,178,179,181,-1,186,183,188,187,-1,184,172,175,185,-1,175,141,165,185,-1,116,186,187,169,-1,187,185,165,169,-1,188,184,185,187,-1,189,171,180,190,-1,180,172,184,190,-1,183,191,192,188,-1,192,190,184,188,-1,193,189,190,192,-1,194,208,207,206,-1,198,195,200,199,-1,0,197,196,-1,0,178,197,-1,182,171,198,199,-1,178,182,199,197,-1,200,196,197,199,-1,200,195,201,203,-1,0,196,202,-1,196,200,203,202,-1,204,0,205,-1,0,202,205,-1,203,201,206,207,-1,205,202,203,207,-1,208,204,205,207,-1,212,209,214,213,-1,210,195,198,211,-1,198,171,189,211,-1,170,212,213,193,-1,213,211,189,193,-1,214};
			return value;
		}
		private int[] getIndexedFaceSet_9_46_coordIndex_2()
		{
			int[] value = {210,211,213,-1,209,215,217,214,-1,216,201,195,210,-1,217,216,210,214,-1,218,194,206,219,-1,206,201,216,219,-1,215,220,221,217,-1,221,219,216,217,-1,222,218,219,221,-1};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_9_46_texCoordIndex_1()
		{
			int[] value = {0,1,2,3,-1,4,5,6,7,-1,8,9,10,11,-1,12,13,14,15,-1,16,17,18,19,-1,20,21,22,23,-1,24,25,26,-1,27,28,24,-1,29,30,20,23,-1,28,29,23,24,-1,22,25,24,23,-1,31,32,33,-1,34,25,33,-1,21,16,19,22,-1,19,33,25,22,-1,18,31,33,19,-1,35,36,37,38,-1,39,40,21,20,-1,30,41,39,20,-1,42,43,35,38,-1,41,42,38,39,-1,37,40,39,38,-1,44,17,16,45,-1,16,21,40,45,-1,36,12,15,37,-1,15,45,40,37,-1,14,44,45,15,-1,46,47,48,49,-1,50,51,52,53,-1,54,55,56,-1,57,31,55,-1,18,17,50,53,-1,31,18,53,55,-1,52,56,55,53,-1,52,51,58,59,-1,60,56,61,-1,56,52,59,61,-1,62,63,64,-1,65,61,64,-1,59,58,49,48,-1,64,61,59,48,-1,47,62,64,48,-1,66,67,68,69,-1,70,51,50,71,-1,50,17,44,71,-1,13,66,69,14,-1,69,71,44,14,-1,68,70,71,69,-1,67,72,73,68,-1,74,58,51,70,-1,73,74,70,68,-1,75,46,49,76,-1,49,58,74,76,-1,72,8,11,73,-1,11,76,74,73,-1,10,75,76,11,-1,77,78,79,80,-1,81,82,83,84,-1,85,86,87,88,-1,89,90,91,-1,92,62,90,-1,47,46,85,88,-1,62,47,88,90,-1,87,91,90,88,-1,93,94,95,-1,96,91,95,-1,87,86,84,83,-1,95,91,87,83,-1,82,93,95,83,-1,97,98,99,100,-1,101,86,85,102,-1,85,46,75,102,-1,9,97,100,10,-1,100,102,75,10,-1,99,101,102,100,-1,103,81,84,104,-1,84,86,101,104,-1,98,77,80,99,-1,80,104,101,99,-1,79,103,104,80,-1,105,106,107,108,-1,109,110,111,112,-1,113,114,115,-1,116,93,114,-1,82,81,109,112,-1,93,82,112,114,-1,111,115,114,112,-1,111,110,117,118,-1,119,115,120,-1,115,111,118,120,-1,121,122,123,-1,124,120,123,-1,118,117,108,107,-1,123,120,118,107,-1,106,121,123,107,-1,125,126,127,128,-1,129,110,109,130,-1,109,81,103,130,-1,78,125,128,79,-1,128,130,103,79,-1,127,129,130,128,-1,126,131,132,127,-1,133,117,110,129,-1,132,133,129,127,-1,134,105,108,135,-1,108,117,133,135,-1,131,4,7,132,-1,7,135,133,132,-1,6,134,135,7,-1,136,137,138,139,-1,140,141,142,143,-1,144,145,146,147,-1,148,149,150,151,-1,152,153,154,-1,155,121,153,-1,106,105,148,151,-1,121,106,151,153,-1,150,154,153,151,-1,156,157,158,-1,159,154,158,-1,150,149,147,146,-1,158,154,150,146,-1,145,156,158,146,-1,160,161,162,163,-1,164,149,148,165,-1,148,105,134,165,-1,5,160,163,6,-1,163,165,134,6,-1,162,164,165,163,-1,166,144,147,167,-1,147,149,164,167,-1,161,140,143,162,-1,143,167,164,162,-1,142,166,167,143,-1,168,169,170,171,-1,172,173,174,175,-1,176,177,178,-1,179,156,177,-1,145,144,172,175,-1,156,145,175,177,-1,174,178,177,175,-1,174,173,180,181,-1,182,178,183,-1,178,174,181,183,-1,184,185,186,-1,187,183,186,-1,181,180,171,170,-1,186,183,181,170,-1,169,184,186,170,-1,188,189,190,191,-1,192,173,172,193,-1,172,144,166,193,-1,141,188,191,142,-1,191,193,166,142,-1,190,192,193,191,-1,189,194,195,190,-1,196,180,173,192,-1,195,196,192,190,-1,197,168,171,198,-1,171,180,196,198,-1,194,136,139,195,-1,139,198,196,195,-1,138,197,198,139,-1,199,200,201,202,-1,203,204,205,206,-1,207,208,209,210,-1,211,212,213,-1,214,184,212,-1,169,168,207,210,-1,184,169,210,212,-1,209,213,212,210,-1,215,216,217,-1,218,213,217,-1,209,208,206,205,-1,217,213,209,205,-1,204,215,217,205,-1,219,220,221,222,-1,223,208,207,224,-1,207,168,197,224,-1,137,219,222,138,-1,222,224,197,138,-1,221,223,224,222,-1,225,203,206,226,-1,206,208,223,226,-1,220,199,202,221,-1,202,226,223,221,-1,201,225,226,202,-1,227,228,229,230,-1,231,232,233,234,-1,235,236,237,-1,238,215,236,-1,204,203,231,234,-1,215,204,234,236,-1,233,237,236,234,-1,233,232,239,240,-1,241,237,242,-1,237,233,240,242,-1,243,244,245,-1,246,242,245,-1,240,239,230,229,-1,245,242,240,229,-1,228,243,245,229,-1,247,248,249,250,-1,251,232,231,252,-1,231,203,225,252,-1,200,247,250,201,-1,250,252,225,201,-1,249};
			return value;
		}
		private int[] getIndexedFaceSet_9_46_texCoordIndex_2()
		{
			int[] value = {251,252,250,-1,248,253,254,249,-1,255,239,232,251,-1,254,255,251,249,-1,256,227,230,257,-1,230,239,255,257,-1,253,0,3,254,-1,3,257,255,254,-1,2,256,257,3,-1};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getsfishp4GeoPoints_10_46_point_1()
		{
			double[] value = {0.407,0.0,9.882,0.416,-0.212,0.573,-0.414,-0.212,0.577,0.0020,1.114,0.079,1.676,-0.0,2.307,1.145,-0.405,1.576,0.708,0.116,5.838,1.053,-0.15,5.865,0.755,-0.018,5.863,0.696,0.028,8.16,0.648,-0.102,8.171,0.662,-0.033,8.166,0.723,0.048,5.853,0.77,0.094,6.873,0.75,0.021,6.884,0.752,-0.058,6.893,0.812,-0.224,8.174,0.691,-0.169,8.174,0.854,-0.085,5.867,0.827,-0.136,6.897,1.002,-0.206,6.896,0.687,-0.245,0.945,0.589,0.037,4.803,0.697,-0.088,4.842,0.637,-0.028,4.826,0.55,-0.189,0.757,0.473,-0.097,3.246,0.557,-0.141,3.311,0.649,-0.2,3.374,1.041,-0.212,4.868,0.822,-0.149,4.856,0.876,-0.332,1.206,0.802,-0.268,3.454,1.044,-0.333,3.564,1.501,0.247,5.853,1.501,-0.19,5.853,1.106,-0.243,8.17,0.969,-0.253,8.172,1.295,-0.194,5.859,1.224,-0.247,6.891,1.415,-0.237,6.887,1.606,-0.116,5.85,1.177,-0.183,8.169,1.514,-0.161,6.884,1.106,0.064,8.17,1.176,-0.078,8.169,1.604,0.03,5.85,1.512,-0.018,6.884,1.415,0.183,6.887,1.676,-0.436,2.307,1.513,-0.254,4.887,1.298,-0.255,4.879,1.437,-0.444,1.978,1.319,-0.375,3.681,1.546,-0.372,3.776,1.798,-0.367,2.475,1.624,-0.184,4.89,1.662,-0.304,3.825,1.513,0.183,4.887,1.621,-0.039,4.89,1.796,-0.224,2.472,1.659,-0.16,3.824,1.546,0.064,3.776,0.619,1.016,0.852,0.68,1.22,5.859,1.078,0.816,5.866,0.825,0.4,8.174,0.977,0.231,8.172,1.311,0.525,5.86,1.237,0.43,6.892,1.023,0.685,6.896,0.606,0.639,8.17,0.691,0.543,8.174,0.854,1.062,5.867,0.827,0.9,6.897,0.688,1.043,6.891,1.168,0.619,1.608,1.068,0.783,4.871,1.315,0.475,4.881,1.452,0.302,1.999,1.336,0.363,3.688,1.071,0.677,3.574,0.617,1.201,4.835,0.822,1.041,4.856,0.876,0.876,1.206,0.802,0.938,3.454,0.57,1.091,3.343,0.284,1.394,5.834,0.459,1.348,5.838,0.525,0.73,8.16,0.558,0.697,8.164,0.552,1.305,5.848,0.598,1.124,6.881,0.533,1.168,6.873,0.389,1.374,5.833,0.487,0.749,8.158,0.474,1.194,6.87,0.398,0.763,8.158,0.444,0.76,8.158,0.333,1.389,5.833};
			return value;
		}
		private double[] getsfishp4GeoPoints_10_46_point_2()
		{
			double[] value = {0.417,1.209,6.87,0.361,1.213,6.87,0.247,1.08,0.34,0.341,1.319,4.794,0.458,1.282,4.812,0.408,1.067,0.561,0.384,1.161,3.248,0.245,1.188,3.176,0.135,1.093,0.189,0.261,1.342,4.784,0.153,1.208,3.128,0.165,1.362,4.781,0.207,1.357,4.781,0.059,1.108,0.104,0.094,1.222,3.103,0.052,1.228,3.096,-1.667,-0.0,2.313,-0.39,1.067,0.578,0.015,1.305,5.848,0.179,1.374,5.833,0.309,0.749,8.158,0.352,0.76,8.158,0.235,1.389,5.833,0.305,1.209,6.87,0.249,1.194,6.87,0.238,0.697,8.164,0.272,0.73,8.16,0.108,1.348,5.838,0.19,1.168,6.873,0.125,1.124,6.881,-0.126,1.093,0.198,0.069,1.342,4.785,0.123,1.357,4.782,-0.054,1.108,0.109,0.01,1.222,3.105,-0.049,1.208,3.131,-0.127,1.282,4.813,-0.011,1.319,4.795,-0.233,1.08,0.353,-0.139,1.188,3.18,-0.276,1.161,3.253,-0.933,0.247,5.853,-0.287,1.062,5.867,0.105,0.543,8.174,0.19,0.639,8.17,-0.112,1.22,5.859,0.034,1.043,6.891,-0.104,0.9,6.897,-0.511,0.816,5.866,-0.029,0.4,8.174,-0.301,0.685,6.896,-0.31,0.064,8.17,-0.181,0.231,8.172,-0.743,0.525,5.86,-0.515,0.43,6.892,-0.693,0.183,6.887,-0.854,0.876,1.223,-0.491,1.041,4.857,-0.286,1.201,4.835,-0.597,1.016,0.87,-0.461,1.091,3.348,-0.694,0.938,3.459,-1.15,0.619,1.622,-0.737,0.783,4.872,-0.964,0.677,3.578,-1.183,0.183,4.887,-0.984,0.475,4.881,-1.439,0.302,2.008,-1.23,0.363,3.691,-1.441,0.064,3.778,-1.427,-0.444,1.986,-0.727,-0.194,5.859,-1.038,-0.116,5.85,-0.381,-0.183,8.169,-0.38,-0.078,8.169,-1.036,0.03,5.85,-0.79,-0.018,6.884,-0.792,-0.161,6.884,-0.173,-0.253,8.172,-0.31,-0.243,8.17,-0.933,-0.19,5.853,-0.693,-0.237,6.887,-0.501,-0.247,6.891,-1.791,-0.367,2.48,-1.293,-0.184,4.89,-1.291,-0.039,4.89,-1.789,-0.224,2.477,-1.555,-0.16,3.825,-1.558,-0.304,3.826,-0.967,-0.255,4.879,-1.183,-0.254,4.887,-1.667,-0.436,2.313,-1.441,-0.372,3.778,-1.213,-0.375,3.683,-0.14,0.116,5.838,-0.287,-0.085,5.867,0.105,-0.169,8.174,-0.015,-0.224,8.174,-0.486,-0.15,5.865,-0.28,-0.206,6.896};
			return value;
		}
		private double[] getsfishp4GeoPoints_10_46_point_3()
		{
			double[] value = {-0.104,-0.136,6.897,-0.187,-0.018,5.863,0.148,-0.102,8.171,-0.03,-0.058,6.893,0.1,0.028,8.16,0.134,-0.033,8.166,-0.156,0.048,5.853,-0.027,0.021,6.884,-0.047,0.094,6.873,-0.863,-0.332,1.215,-0.491,-0.149,4.856,-0.71,-0.212,4.869,-1.133,-0.405,1.585,-0.939,-0.333,3.566,-0.696,-0.268,3.457,-0.674,-0.245,0.954,-0.367,-0.088,4.843,-0.544,-0.2,3.376,-0.259,0.037,4.804,-0.307,-0.028,4.826,-0.541,-0.189,0.764,-0.452,-0.141,3.313,-0.37,-0.097,3.247};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getTextureCoordinate_10_47_point_1()
		{
			double[] value = {1.0,0.972222,1.0,1.0,0.833333,1.0,0.833333,0.972222,1.0,0.472222,1.0,0.5,0.833333,0.5,0.833333,0.472222,1.0,0.222222,1.0,0.25,0.833333,0.25,0.833333,0.222222,1.0,0.083333,1.0,0.111111,0.833333,0.111111,0.833333,0.083333,0.5,0.083333,0.5,0.111111,0.333333,0.111111,0.333333,0.083333,0.5,0.027778,0.5,0.055556,0.333333,0.055556,0.333333,0.027778,0.166667,0.027778,0.166667,0.055556,0.0,0.027778,0.0,0.0,0.166667,0.0,0.333333,0.0,0.5,0.0,0.166667,0.111111,0.0,0.083333,0.166667,0.083333,0.0,0.055556,1.0,0.027778,1.0,0.055556,0.833333,0.055556,0.833333,0.027778,0.666667,0.027778,0.666667,0.055556,0.666667,0.0,0.833333,0.0,1.0,0.0,0.666667,0.111111,0.666667,0.083333,0.5,0.25,0.333333,0.25,0.333333,0.222222,0.5,0.222222,0.5,0.138889,0.5,0.166667,0.333333,0.166667,0.333333,0.138889,0.0,0.138889,0.166667,0.138889,0.166667,0.166667,0.0,0.111111,0.5,0.194444,0.333333,0.194444,0.0,0.166667,0.166667,0.194444,0.166667,0.25,0.0,0.222222,0.166667,0.222222,0.0,0.194444,1.0,0.138889,1.0,0.166667,0.833333,0.166667,0.833333,0.138889,0.666667,0.166667,0.666667,0.138889,1.0,0.194444,0.833333,0.194444,0.666667,0.194444,0.666667,0.25,0.666667,0.222222,1.0,0.333333,1.0,0.361111,0.833333,0.361111,0.833333,0.333333,0.5,0.361111,0.333333,0.361111,0.333333,0.333333,0.5,0.333333,0.5,0.277778,0.5,0.305556,0.333333,0.305556,0.333333,0.277778,0.0,0.277778,0.166667,0.277778,0.166667,0.305556,0.0,0.25,0.166667,0.361111,0.0,0.333333,0.166667,0.333333,0.0,0.305556,1.0,0.277778,1.0,0.305556,0.833333,0.305556};
			return value;
		}
		private double[] getTextureCoordinate_10_47_point_2()
		{
			double[] value = {0.833333,0.277778,0.666667,0.305556,0.666667,0.277778,0.666667,0.361111,0.666667,0.333333,0.5,0.5,0.333333,0.5,0.333333,0.472222,0.5,0.472222,0.5,0.388889,0.5,0.416667,0.333333,0.416667,0.333333,0.388889,0.0,0.388889,0.166667,0.388889,0.166667,0.416667,0.0,0.361111,0.5,0.444444,0.333333,0.444444,0.0,0.416667,0.166667,0.444444,0.166667,0.5,0.0,0.472222,0.166667,0.472222,0.0,0.444444,1.0,0.388889,1.0,0.416667,0.833333,0.416667,0.833333,0.388889,0.666667,0.416667,0.666667,0.388889,1.0,0.444444,0.833333,0.444444,0.666667,0.444444,0.666667,0.5,0.666667,0.472222,1.0,0.722222,1.0,0.75,0.833333,0.75,0.833333,0.722222,1.0,0.583333,1.0,0.611111,0.833333,0.611111,0.833333,0.583333,0.5,0.611111,0.333333,0.611111,0.333333,0.583333,0.5,0.583333,0.5,0.527778,0.5,0.555556,0.333333,0.555556,0.333333,0.527778,0.0,0.527778,0.166667,0.527778,0.166667,0.555556,0.0,0.5,0.166667,0.611111,0.0,0.583333,0.166667,0.583333,0.0,0.555556,1.0,0.527778,1.0,0.555556,0.833333,0.555556,0.833333,0.527778,0.666667,0.555556,0.666667,0.527778,0.666667,0.611111,0.666667,0.583333,0.5,0.75,0.333333,0.75,0.333333,0.722222,0.5,0.722222,0.5,0.638889,0.5,0.666667,0.333333,0.666667,0.333333,0.638889,0.0,0.638889,0.166667,0.638889,0.166667,0.666667,0.0,0.611111,0.5,0.694444,0.333333,0.694444,0.0,0.666667,0.166667,0.694444,0.166667,0.75,0.0,0.722222,0.166667,0.722222,0.0,0.694444,1.0,0.638889,1.0,0.666667,0.833333,0.666667,0.833333,0.638889,0.666667,0.666667,0.666667,0.638889,1.0,0.694444,0.833333,0.694444,0.666667,0.694444,0.666667,0.75,0.666667,0.722222,1.0,0.833333};
			return value;
		}
		private double[] getTextureCoordinate_10_47_point_3()
		{
			double[] value = {1.0,0.861111,0.833333,0.861111,0.833333,0.833333,0.5,0.861111,0.333333,0.861111,0.333333,0.833333,0.5,0.833333,0.5,0.777778,0.5,0.805556,0.333333,0.805556,0.333333,0.777778,0.0,0.777778,0.166667,0.777778,0.166667,0.805556,0.0,0.75,0.166667,0.861111,0.0,0.833333,0.166667,0.833333,0.0,0.805556,1.0,0.777778,1.0,0.805556,0.833333,0.805556,0.833333,0.777778,0.666667,0.805556,0.666667,0.777778,0.666667,0.861111,0.666667,0.833333,0.5,1.0,0.333333,1.0,0.333333,0.972222,0.5,0.972222,0.5,0.888889,0.5,0.916667,0.333333,0.916667,0.333333,0.888889,0.0,0.888889,0.166667,0.888889,0.166667,0.916667,0.0,0.861111,0.5,0.944444,0.333333,0.944444,0.0,0.916667,0.166667,0.944444,0.166667,1.0,0.0,0.972222,0.166667,0.972222,0.0,0.944444,1.0,0.888889,1.0,0.916667,0.833333,0.916667,0.833333,0.888889,0.666667,0.916667,0.666667,0.888889,1.0,0.944444,0.833333,0.944444,0.666667,0.944444,0.666667,1.0,0.666667,0.972222};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_9_53_coordIndex_1()
		{
			int[] value = {220,2,222,221,-1,113,3,115,114,-1,60,4,62,61,-1,31,5,33,32,-1,18,7,20,19,-1,12,8,15,14,-1,11,10,0,-1,0,9,11,-1,13,6,12,14,-1,9,13,14,11,-1,15,10,11,14,-1,16,0,17,-1,0,10,17,-1,8,18,19,15,-1,19,17,10,15,-1,20,16,17,19,-1,25,21,28,27,-1,24,23,8,12,-1,6,22,24,12,-1,26,1,25,27,-1,22,26,27,24,-1,28,23,24,27,-1,29,7,18,30,-1,18,8,23,30,-1,21,31,32,28,-1,32,30,23,28,-1,33,29,30,32,-1,34,48,47,46,-1,38,35,40,39,-1,0,37,36,-1,0,16,37,-1,20,7,38,39,-1,16,20,39,37,-1,40,36,37,39,-1,40,35,41,43,-1,0,36,42,-1,36,40,43,42,-1,44,0,45,-1,0,42,45,-1,43,41,46,47,-1,45,42,43,47,-1,48,44,45,47,-1,52,49,54,53,-1,50,35,38,51,-1,38,7,29,51,-1,5,52,53,33,-1,53,51,29,33,-1,54,50,51,53,-1,49,55,57,54,-1,56,41,35,50,-1,57,56,50,54,-1,58,34,46,59,-1,46,41,56,59,-1,55,60,61,57,-1,61,59,56,57,-1,62,58,59,61,-1,84,63,86,85,-1,64,75,74,73,-1,68,65,70,69,-1,0,67,66,-1,0,44,67,-1,48,34,68,69,-1,44,48,69,67,-1,70,66,67,69,-1,71,0,72,-1,0,66,72,-1,70,65,73,74,-1,72,66,70,74,-1,75,71,72,74,-1,79,76,81,80,-1,77,65,68,78,-1,68,34,58,78,-1,4,79,80,62,-1,80,78,58,62,-1,81,77,78,80,-1,82,64,73,83,-1,73,65,77,83,-1,76,84,85,81,-1,85,83,77,81,-1,86,82,83,85,-1,87,101,100,99,-1,91,88,93,92,-1,0,90,89,-1,0,71,90,-1,75,64,91,92,-1,71,75,92,90,-1,93,89,90,92,-1,93,88,94,96,-1,0,89,95,-1,89,93,96,95,-1,97,0,98,-1,0,95,98,-1,96,94,99,100,-1,98,95,96,100,-1,101,97,98,100,-1,105,102,107,106,-1,103,88,91,104,-1,91,64,82,104,-1,63,105,106,86,-1,106,104,82,86,-1,107,103,104,106,-1,102,108,110,107,-1,109,94,88,103,-1,110,109,103,107,-1,111,87,99,112,-1,99,94,109,112,-1,108,113,114,110,-1,114,112,109,110,-1,115,111,112,114,-1,167,116,169,168,-1,138,117,140,139,-1,118,129,128,127,-1,122,119,124,123,-1,0,121,120,-1,0,97,121,-1,101,87,122,123,-1,97,101,123,121,-1,124,120,121,123,-1,125,0,126,-1,0,120,126,-1,124,119,127,128,-1,126,120,124,128,-1,129,125,126,128,-1,133,130,135,134,-1,131,119,122,132,-1,122,87,111,132,-1,3,133,134,115,-1,134,132,111,115,-1,135,131,132,134,-1,136,118,127,137,-1,127,119,131,137,-1,130,138,139,135,-1,139,137,131,135,-1,140,136,137,139,-1,141,155,154,153,-1,145,142,147,146,-1,0,144,143,-1,0,125,144,-1,129,118,145,146,-1,125,129,146,144,-1,147,143,144,146,-1,147,142,148,150,-1,0,143,149,-1,143,147,150,149,-1,151,0,152,-1,0,149,152,-1,150,148,153,154,-1,152,149,150,154,-1,155,151,152,154,-1,159,156,161,160,-1,157,142,145,158,-1,145,118,136,158,-1,117,159,160,140,-1,160,158,136,140,-1,161,157,158,160,-1,156,162,164,161,-1,163,148,142,157,-1,164,163,157,161,-1,165,141,153,166,-1,153,148,163,166,-1,162,167,168,164,-1,168,166,163,164,-1,169,165,166,168,-1,191,170,193,192,-1,171,182,181,180,-1,175,172,177,176,-1,0,174,173,-1,0,151,174,-1,155,141,175,176,-1,151,155,176,174,-1,177,173,174,176,-1,178,0,179,-1,0,173,179,-1,177,172,180,181,-1,179,173,177,181,-1,182,178,179,181,-1,186,183,188,187,-1,184,172,175,185,-1,175,141,165,185,-1,116,186,187,169,-1,187,185,165,169,-1,188,184,185,187,-1,189,171,180,190,-1,180,172,184,190,-1,183,191,192,188,-1,192,190,184,188,-1,193,189,190,192,-1,194,208,207,206,-1,198,195,200,199,-1,0,197,196,-1,0,178,197,-1,182,171,198,199,-1,178,182,199,197,-1,200,196,197,199,-1,200,195,201,203,-1,0,196,202,-1,196,200,203,202,-1,204,0,205,-1,0,202,205,-1,203,201,206,207,-1,205,202,203,207,-1,208,204,205,207,-1,212,209,214,213,-1,210,195,198,211,-1,198,171,189,211,-1,170,212,213,193,-1,213,211,189,193,-1,214};
			return value;
		}
		private int[] getIndexedFaceSet_9_53_coordIndex_2()
		{
			int[] value = {210,211,213,-1,209,215,217,214,-1,216,201,195,210,-1,217,216,210,214,-1,218,194,206,219,-1,206,201,216,219,-1,215,220,221,217,-1,221,219,216,217,-1,222,218,219,221,-1};
			return value;
		}


		/** Define subarrays using type int[] */
		private int[] getIndexedFaceSet_9_53_texCoordIndex_1()
		{
			int[] value = {0,1,2,3,-1,4,5,6,7,-1,8,9,10,11,-1,12,13,14,15,-1,16,17,18,19,-1,20,21,22,23,-1,24,25,26,-1,27,28,24,-1,29,30,20,23,-1,28,29,23,24,-1,22,25,24,23,-1,31,32,33,-1,34,25,33,-1,21,16,19,22,-1,19,33,25,22,-1,18,31,33,19,-1,35,36,37,38,-1,39,40,21,20,-1,30,41,39,20,-1,42,43,35,38,-1,41,42,38,39,-1,37,40,39,38,-1,44,17,16,45,-1,16,21,40,45,-1,36,12,15,37,-1,15,45,40,37,-1,14,44,45,15,-1,46,47,48,49,-1,50,51,52,53,-1,54,55,56,-1,57,31,55,-1,18,17,50,53,-1,31,18,53,55,-1,52,56,55,53,-1,52,51,58,59,-1,60,56,61,-1,56,52,59,61,-1,62,63,64,-1,65,61,64,-1,59,58,49,48,-1,64,61,59,48,-1,47,62,64,48,-1,66,67,68,69,-1,70,51,50,71,-1,50,17,44,71,-1,13,66,69,14,-1,69,71,44,14,-1,68,70,71,69,-1,67,72,73,68,-1,74,58,51,70,-1,73,74,70,68,-1,75,46,49,76,-1,49,58,74,76,-1,72,8,11,73,-1,11,76,74,73,-1,10,75,76,11,-1,77,78,79,80,-1,81,82,83,84,-1,85,86,87,88,-1,89,90,91,-1,92,62,90,-1,47,46,85,88,-1,62,47,88,90,-1,87,91,90,88,-1,93,94,95,-1,96,91,95,-1,87,86,84,83,-1,95,91,87,83,-1,82,93,95,83,-1,97,98,99,100,-1,101,86,85,102,-1,85,46,75,102,-1,9,97,100,10,-1,100,102,75,10,-1,99,101,102,100,-1,103,81,84,104,-1,84,86,101,104,-1,98,77,80,99,-1,80,104,101,99,-1,79,103,104,80,-1,105,106,107,108,-1,109,110,111,112,-1,113,114,115,-1,116,93,114,-1,82,81,109,112,-1,93,82,112,114,-1,111,115,114,112,-1,111,110,117,118,-1,119,115,120,-1,115,111,118,120,-1,121,122,123,-1,124,120,123,-1,118,117,108,107,-1,123,120,118,107,-1,106,121,123,107,-1,125,126,127,128,-1,129,110,109,130,-1,109,81,103,130,-1,78,125,128,79,-1,128,130,103,79,-1,127,129,130,128,-1,126,131,132,127,-1,133,117,110,129,-1,132,133,129,127,-1,134,105,108,135,-1,108,117,133,135,-1,131,4,7,132,-1,7,135,133,132,-1,6,134,135,7,-1,136,137,138,139,-1,140,141,142,143,-1,144,145,146,147,-1,148,149,150,151,-1,152,153,154,-1,155,121,153,-1,106,105,148,151,-1,121,106,151,153,-1,150,154,153,151,-1,156,157,158,-1,159,154,158,-1,150,149,147,146,-1,158,154,150,146,-1,145,156,158,146,-1,160,161,162,163,-1,164,149,148,165,-1,148,105,134,165,-1,5,160,163,6,-1,163,165,134,6,-1,162,164,165,163,-1,166,144,147,167,-1,147,149,164,167,-1,161,140,143,162,-1,143,167,164,162,-1,142,166,167,143,-1,168,169,170,171,-1,172,173,174,175,-1,176,177,178,-1,179,156,177,-1,145,144,172,175,-1,156,145,175,177,-1,174,178,177,175,-1,174,173,180,181,-1,182,178,183,-1,178,174,181,183,-1,184,185,186,-1,187,183,186,-1,181,180,171,170,-1,186,183,181,170,-1,169,184,186,170,-1,188,189,190,191,-1,192,173,172,193,-1,172,144,166,193,-1,141,188,191,142,-1,191,193,166,142,-1,190,192,193,191,-1,189,194,195,190,-1,196,180,173,192,-1,195,196,192,190,-1,197,168,171,198,-1,171,180,196,198,-1,194,136,139,195,-1,139,198,196,195,-1,138,197,198,139,-1,199,200,201,202,-1,203,204,205,206,-1,207,208,209,210,-1,211,212,213,-1,214,184,212,-1,169,168,207,210,-1,184,169,210,212,-1,209,213,212,210,-1,215,216,217,-1,218,213,217,-1,209,208,206,205,-1,217,213,209,205,-1,204,215,217,205,-1,219,220,221,222,-1,223,208,207,224,-1,207,168,197,224,-1,137,219,222,138,-1,222,224,197,138,-1,221,223,224,222,-1,225,203,206,226,-1,206,208,223,226,-1,220,199,202,221,-1,202,226,223,221,-1,201,225,226,202,-1,227,228,229,230,-1,231,232,233,234,-1,235,236,237,-1,238,215,236,-1,204,203,231,234,-1,215,204,234,236,-1,233,237,236,234,-1,233,232,239,240,-1,241,237,242,-1,237,233,240,242,-1,243,244,245,-1,246,242,245,-1,240,239,230,229,-1,245,242,240,229,-1,228,243,245,229,-1,247,248,249,250,-1,251,232,231,252,-1,231,203,225,252,-1,200,247,250,201,-1,250,252,225,201,-1,249};
			return value;
		}
		private int[] getIndexedFaceSet_9_53_texCoordIndex_2()
		{
			int[] value = {251,252,250,-1,248,253,254,249,-1,255,239,232,251,-1,254,255,251,249,-1,256,227,230,257,-1,230,239,255,257,-1,253,0,3,254,-1,3,257,255,254,-1,2,256,257,3,-1};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getsfishp5GeoPoints_10_53_point_1()
		{
			double[] value = {-0.45,0.437,9.65,0.417,-0.212,0.576,-0.424,-0.212,0.567,-0.0050,1.114,0.071,1.676,-0.0,2.307,1.145,-0.405,1.576,0.562,0.054,5.972,0.907,-0.212,5.999,0.609,-0.08,5.997,0.216,0.141,8.195,0.168,0.011,8.206,0.182,0.08,8.201,0.577,-0.014,5.987,0.524,0.065,7.023,0.505,-0.0090,7.034,0.507,-0.088,7.043,0.331,-0.111,8.209,0.211,-0.056,8.209,0.708,-0.146,6.001,0.582,-0.166,7.047,0.757,-0.235,7.045,0.687,-0.245,0.945,0.434,-0.0090,4.83,0.542,-0.133,4.869,0.482,-0.073,4.852,0.55,-0.189,0.757,0.32,-0.113,3.185,0.403,-0.157,3.25,0.496,-0.216,3.312,0.886,-0.257,4.895,0.667,-0.194,4.882,0.876,-0.332,1.206,0.649,-0.284,3.393,0.891,-0.349,3.502,1.355,0.185,5.987,1.355,-0.251,5.987,0.626,-0.13,8.205,0.489,-0.14,8.207,1.149,-0.255,5.993,0.979,-0.276,7.041,1.17,-0.267,7.036,1.46,-0.178,5.984,0.697,-0.07,8.204,1.269,-0.19,7.034,0.626,0.177,8.205,0.696,0.035,8.204,1.458,-0.032,5.984,1.267,-0.048,7.034,1.17,0.153,7.036,1.676,-0.436,2.307,1.358,-0.299,4.913,1.143,-0.301,4.905,1.437,-0.444,1.978,1.165,-0.391,3.62,1.392,-0.388,3.715,1.798,-0.367,2.475,1.468,-0.23,4.916,1.508,-0.32,3.764,1.358,0.137,4.913,1.466,-0.085,4.916,1.796,-0.224,2.472,1.506,-0.176,3.763,1.392,0.048,3.715,0.623,1.016,0.85,0.534,1.158,5.993,0.932,0.754,6.0,0.345,0.513,8.209,0.497,0.345,8.208,1.165,0.463,5.994,0.992,0.401,7.042,0.778,0.655,7.046,0.126,0.753,8.205,0.211,0.656,8.209,0.708,1.0,6.001,0.582,0.871,7.047,0.443,1.013,7.04,1.169,0.619,1.608,0.913,0.737,4.897,1.16,0.429,4.907,1.452,0.302,1.999,1.182,0.347,3.627,0.918,0.661,3.513,0.462,1.155,4.861,0.667,0.995,4.882,0.878,0.876,1.205,0.649,0.922,3.392,0.418,1.075,3.281,0.138,1.332,5.968,0.313,1.287,5.971,0.044,0.843,8.195,0.078,0.81,8.2,0.406,1.244,5.982,0.353,1.095,7.031,0.288,1.139,7.023,0.243,1.313,5.967,0.0070,0.863,8.193,0.229,1.165,7.019,-0.082,0.877,8.194,-0.036,0.873,8.193,0.187,1.327,5.967};
			return value;
		}
		private double[] getsfishp5GeoPoints_10_53_point_2()
		{
			double[] value = {0.172,1.179,7.019,0.116,1.183,7.02,0.254,1.08,0.336,0.186,1.273,4.82,0.303,1.236,4.839,0.414,1.067,0.558,0.232,1.145,3.186,0.094,1.172,3.113,0.141,1.093,0.185,0.106,1.297,4.811,0.0010,1.192,3.066,0.01,1.316,4.807,0.052,1.311,4.808,0.061,1.108,0.1,-0.059,1.206,3.041,-0.104,1.212,3.033,-1.667,-0.0,2.313,-0.421,1.067,0.552,-0.131,1.244,5.982,0.033,1.313,5.967,-0.171,0.863,8.193,-0.128,0.873,8.193,0.089,1.327,5.967,0.06,1.179,7.019,0.0030,1.165,7.019,-0.242,0.81,8.2,-0.209,0.843,8.195,-0.038,1.287,5.971,-0.055,1.139,7.023,-0.12,1.095,7.031,-0.158,1.093,0.172,-0.087,1.297,4.81,-0.032,1.311,4.807,-0.073,1.108,0.092,-0.15,1.206,3.038,-0.211,1.192,3.062,-0.283,1.236,4.838,-0.167,1.273,4.82,-0.27,1.08,0.323,-0.304,1.172,3.11,-0.439,1.145,3.184,-1.079,0.185,5.987,-0.433,1.0,6.001,-0.375,0.656,8.209,-0.29,0.753,8.205,-0.258,1.158,5.993,-0.211,1.013,7.04,-0.349,0.871,7.047,-0.657,0.754,6.0,-0.509,0.513,8.209,-0.546,0.655,7.046,-0.79,0.177,8.205,-0.661,0.345,8.208,-0.889,0.463,5.994,-0.76,0.401,7.042,-0.938,0.153,7.036,-0.863,0.876,1.215,-0.646,0.995,4.883,-0.442,1.155,4.861,-0.617,1.016,0.853,-0.621,1.075,3.282,-0.85,0.922,3.395,-1.152,0.619,1.62,-0.892,0.737,4.898,-1.118,0.661,3.516,-1.338,0.137,4.913,-1.139,0.429,4.907,-1.439,0.302,2.008,-1.383,0.347,3.629,-1.595,0.048,3.717,-1.427,-0.444,1.986,-0.873,-0.255,5.993,-1.184,-0.178,5.984,-0.861,-0.07,8.204,-0.86,0.035,8.204,-1.182,-0.032,5.984,-1.035,-0.048,7.034,-1.037,-0.19,7.034,-0.653,-0.14,8.207,-0.79,-0.13,8.205,-1.079,-0.251,5.987,-0.938,-0.267,7.036,-0.746,-0.276,7.041,-1.791,-0.367,2.48,-1.448,-0.23,4.917,-1.446,-0.085,4.916,-1.789,-0.224,2.477,-1.709,-0.176,3.764,-1.711,-0.32,3.765,-1.122,-0.301,4.906,-1.338,-0.299,4.913,-1.667,-0.436,2.313,-1.595,-0.388,3.717,-1.367,-0.391,3.622,-0.286,0.054,5.972,-0.433,-0.146,6.001,-0.375,-0.056,8.209,-0.496,-0.111,8.209,-0.632,-0.212,5.999,-0.525,-0.235,7.045};
			return value;
		}
		private double[] getsfishp5GeoPoints_10_53_point_3()
		{
			double[] value = {-0.349,-0.166,7.047,-0.333,-0.08,5.997,-0.332,0.011,8.206,-0.275,-0.088,7.043,-0.38,0.141,8.195,-0.346,0.08,8.201,-0.302,-0.014,5.987,-0.273,-0.0090,7.034,-0.292,0.065,7.023,-0.863,-0.332,1.215,-0.646,-0.194,4.883,-0.865,-0.257,4.895,-1.133,-0.405,1.585,-1.092,-0.349,3.505,-0.85,-0.284,3.395,-0.675,-0.245,0.954,-0.522,-0.133,4.869,-0.697,-0.216,3.315,-0.414,-0.0090,4.83,-0.462,-0.073,4.852,-0.543,-0.189,0.761,-0.606,-0.157,3.251,-0.527,-0.113,3.183};
			return value;
		}


		/** Define subarrays using type double[] */
		private double[] getTextureCoordinate_10_54_point_1()
		{
			double[] value = {1.0,0.972222,1.0,1.0,0.833333,1.0,0.833333,0.972222,1.0,0.472222,1.0,0.5,0.833333,0.5,0.833333,0.472222,1.0,0.222222,1.0,0.25,0.833333,0.25,0.833333,0.222222,1.0,0.083333,1.0,0.111111,0.833333,0.111111,0.833333,0.083333,0.5,0.083333,0.5,0.111111,0.333333,0.111111,0.333333,0.083333,0.5,0.027778,0.5,0.055556,0.333333,0.055556,0.333333,0.027778,0.166667,0.027778,0.166667,0.055556,0.0,0.027778,0.0,0.0,0.166667,0.0,0.333333,0.0,0.5,0.0,0.166667,0.111111,0.0,0.083333,0.166667,0.083333,0.0,0.055556,1.0,0.027778,1.0,0.055556,0.833333,0.055556,0.833333,0.027778,0.666667,0.027778,0.666667,0.055556,0.666667,0.0,0.833333,0.0,1.0,0.0,0.666667,0.111111,0.666667,0.083333,0.5,0.25,0.333333,0.25,0.333333,0.222222,0.5,0.222222,0.5,0.138889,0.5,0.166667,0.333333,0.166667,0.333333,0.138889,0.0,0.138889,0.166667,0.138889,0.166667,0.166667,0.0,0.111111,0.5,0.194444,0.333333,0.194444,0.0,0.166667,0.166667,0.194444,0.166667,0.25,0.0,0.222222,0.166667,0.222222,0.0,0.194444,1.0,0.138889,1.0,0.166667,0.833333,0.166667,0.833333,0.138889,0.666667,0.166667,0.666667,0.138889,1.0,0.194444,0.833333,0.194444,0.666667,0.194444,0.666667,0.25,0.666667,0.222222,1.0,0.333333,1.0,0.361111,0.833333,0.361111,0.833333,0.333333,0.5,0.361111,0.333333,0.361111,0.333333,0.333333,0.5,0.333333,0.5,0.277778,0.5,0.305556,0.333333,0.305556,0.333333,0.277778,0.0,0.277778,0.166667,0.277778,0.166667,0.305556,0.0,0.25,0.166667,0.361111,0.0,0.333333,0.166667,0.333333,0.0,0.305556,1.0,0.277778,1.0,0.305556,0.833333,0.305556};
			return value;
		}
		private double[] getTextureCoordinate_10_54_point_2()
		{
			double[] value = {0.833333,0.277778,0.666667,0.305556,0.666667,0.277778,0.666667,0.361111,0.666667,0.333333,0.5,0.5,0.333333,0.5,0.333333,0.472222,0.5,0.472222,0.5,0.388889,0.5,0.416667,0.333333,0.416667,0.333333,0.388889,0.0,0.388889,0.166667,0.388889,0.166667,0.416667,0.0,0.361111,0.5,0.444444,0.333333,0.444444,0.0,0.416667,0.166667,0.444444,0.166667,0.5,0.0,0.472222,0.166667,0.472222,0.0,0.444444,1.0,0.388889,1.0,0.416667,0.833333,0.416667,0.833333,0.388889,0.666667,0.416667,0.666667,0.388889,1.0,0.444444,0.833333,0.444444,0.666667,0.444444,0.666667,0.5,0.666667,0.472222,1.0,0.722222,1.0,0.75,0.833333,0.75,0.833333,0.722222,1.0,0.583333,1.0,0.611111,0.833333,0.611111,0.833333,0.583333,0.5,0.611111,0.333333,0.611111,0.333333,0.583333,0.5,0.583333,0.5,0.527778,0.5,0.555556,0.333333,0.555556,0.333333,0.527778,0.0,0.527778,0.166667,0.527778,0.166667,0.555556,0.0,0.5,0.166667,0.611111,0.0,0.583333,0.166667,0.583333,0.0,0.555556,1.0,0.527778,1.0,0.555556,0.833333,0.555556,0.833333,0.527778,0.666667,0.555556,0.666667,0.527778,0.666667,0.611111,0.666667,0.583333,0.5,0.75,0.333333,0.75,0.333333,0.722222,0.5,0.722222,0.5,0.638889,0.5,0.666667,0.333333,0.666667,0.333333,0.638889,0.0,0.638889,0.166667,0.638889,0.166667,0.666667,0.0,0.611111,0.5,0.694444,0.333333,0.694444,0.0,0.666667,0.166667,0.694444,0.166667,0.75,0.0,0.722222,0.166667,0.722222,0.0,0.694444,1.0,0.638889,1.0,0.666667,0.833333,0.666667,0.833333,0.638889,0.666667,0.666667,0.666667,0.638889,1.0,0.694444,0.833333,0.694444,0.666667,0.694444,0.666667,0.75,0.666667,0.722222,1.0,0.833333};
			return value;
		}
		private double[] getTextureCoordinate_10_54_point_3()
		{
			double[] value = {1.0,0.861111,0.833333,0.861111,0.833333,0.833333,0.5,0.861111,0.333333,0.861111,0.333333,0.833333,0.5,0.833333,0.5,0.777778,0.5,0.805556,0.333333,0.805556,0.333333,0.777778,0.0,0.777778,0.166667,0.777778,0.166667,0.805556,0.0,0.75,0.166667,0.861111,0.0,0.833333,0.166667,0.833333,0.0,0.805556,1.0,0.777778,1.0,0.805556,0.833333,0.805556,0.833333,0.777778,0.666667,0.805556,0.666667,0.777778,0.666667,0.861111,0.666667,0.833333,0.5,1.0,0.333333,1.0,0.333333,0.972222,0.5,0.972222,0.5,0.888889,0.5,0.916667,0.333333,0.916667,0.333333,0.888889,0.0,0.888889,0.166667,0.888889,0.166667,0.916667,0.0,0.861111,0.5,0.944444,0.333333,0.944444,0.0,0.916667,0.166667,0.944444,0.166667,1.0,0.0,0.972222,0.166667,0.972222,0.0,0.944444,1.0,0.888889,1.0,0.916667,0.833333,0.916667,0.833333,0.888889,0.666667,0.916667,0.666667,0.888889,1.0,0.944444,0.833333,0.944444,0.666667,0.944444,0.666667,1.0,0.666667,0.972222};
			return value;
		}

		/** Large attribute array: IndexedFaceSet coordIndex field, scene-graph level=9, element #25, 1044 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_9_25_coordIndex()
		{
			MFInt32 IndexedFaceSet_9_25_coordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_9_25_coordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_9_25_coordIndex_2()));
			return IndexedFaceSet_9_25_coordIndex;
		}
		/** Large attribute array: IndexedFaceSet texCoordIndex field, scene-graph level=9, element #25, 1044 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_9_25_texCoordIndex()
		{
			MFInt32 IndexedFaceSet_9_25_texCoordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_9_25_texCoordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_9_25_texCoordIndex_2()));
			return IndexedFaceSet_9_25_texCoordIndex;
		}
		/** Large attribute array: Coordinate DEF='sfishp1GeoPoints' point field, scene-graph level=10, element #25, 669 total numbers made up of 223 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3f getsfishp1GeoPoints_10_25_point()
		{
			MFVec3f sfishp1GeoPoints_10_25_point = new MFVec3f()/*2.finalize*/
				.append(new MFVec3f(getsfishp1GeoPoints_10_25_point_1()))
				.append(new MFVec3f(getsfishp1GeoPoints_10_25_point_2()))
				.append(new MFVec3f(getsfishp1GeoPoints_10_25_point_3()));
			return sfishp1GeoPoints_10_25_point;
		}
		/** Large attribute array: TextureCoordinate point field, scene-graph level=10, element #26, 516 total numbers made up of 258 2-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec2f getTextureCoordinate_10_26_point()
		{
			MFVec2f TextureCoordinate_10_26_point = new MFVec2f()/*2.finalize*/
				.append(new MFVec2f(getTextureCoordinate_10_26_point_1()))
				.append(new MFVec2f(getTextureCoordinate_10_26_point_2()))
				.append(new MFVec2f(getTextureCoordinate_10_26_point_3()));
			return TextureCoordinate_10_26_point;
		}
		/** Large attribute array: IndexedFaceSet coordIndex field, scene-graph level=9, element #32, 1044 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_9_32_coordIndex()
		{
			MFInt32 IndexedFaceSet_9_32_coordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_9_32_coordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_9_32_coordIndex_2()));
			return IndexedFaceSet_9_32_coordIndex;
		}
		/** Large attribute array: IndexedFaceSet texCoordIndex field, scene-graph level=9, element #32, 1044 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_9_32_texCoordIndex()
		{
			MFInt32 IndexedFaceSet_9_32_texCoordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_9_32_texCoordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_9_32_texCoordIndex_2()));
			return IndexedFaceSet_9_32_texCoordIndex;
		}
		/** Large attribute array: Coordinate DEF='sfishp2GeoPoints' point field, scene-graph level=10, element #32, 669 total numbers made up of 223 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3f getsfishp2GeoPoints_10_32_point()
		{
			MFVec3f sfishp2GeoPoints_10_32_point = new MFVec3f()/*2.finalize*/
				.append(new MFVec3f(getsfishp2GeoPoints_10_32_point_1()))
				.append(new MFVec3f(getsfishp2GeoPoints_10_32_point_2()))
				.append(new MFVec3f(getsfishp2GeoPoints_10_32_point_3()));
			return sfishp2GeoPoints_10_32_point;
		}
		/** Large attribute array: TextureCoordinate point field, scene-graph level=10, element #33, 516 total numbers made up of 258 2-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec2f getTextureCoordinate_10_33_point()
		{
			MFVec2f TextureCoordinate_10_33_point = new MFVec2f()/*2.finalize*/
				.append(new MFVec2f(getTextureCoordinate_10_33_point_1()))
				.append(new MFVec2f(getTextureCoordinate_10_33_point_2()))
				.append(new MFVec2f(getTextureCoordinate_10_33_point_3()));
			return TextureCoordinate_10_33_point;
		}
		/** Large attribute array: IndexedFaceSet coordIndex field, scene-graph level=9, element #39, 1044 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_9_39_coordIndex()
		{
			MFInt32 IndexedFaceSet_9_39_coordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_9_39_coordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_9_39_coordIndex_2()));
			return IndexedFaceSet_9_39_coordIndex;
		}
		/** Large attribute array: IndexedFaceSet texCoordIndex field, scene-graph level=9, element #39, 1044 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_9_39_texCoordIndex()
		{
			MFInt32 IndexedFaceSet_9_39_texCoordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_9_39_texCoordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_9_39_texCoordIndex_2()));
			return IndexedFaceSet_9_39_texCoordIndex;
		}
		/** Large attribute array: Coordinate DEF='sfishp3GeoPoints' point field, scene-graph level=10, element #39, 669 total numbers made up of 223 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3f getsfishp3GeoPoints_10_39_point()
		{
			MFVec3f sfishp3GeoPoints_10_39_point = new MFVec3f()/*2.finalize*/
				.append(new MFVec3f(getsfishp3GeoPoints_10_39_point_1()))
				.append(new MFVec3f(getsfishp3GeoPoints_10_39_point_2()))
				.append(new MFVec3f(getsfishp3GeoPoints_10_39_point_3()));
			return sfishp3GeoPoints_10_39_point;
		}
		/** Large attribute array: TextureCoordinate point field, scene-graph level=10, element #40, 516 total numbers made up of 258 2-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec2f getTextureCoordinate_10_40_point()
		{
			MFVec2f TextureCoordinate_10_40_point = new MFVec2f()/*2.finalize*/
				.append(new MFVec2f(getTextureCoordinate_10_40_point_1()))
				.append(new MFVec2f(getTextureCoordinate_10_40_point_2()))
				.append(new MFVec2f(getTextureCoordinate_10_40_point_3()));
			return TextureCoordinate_10_40_point;
		}
		/** Large attribute array: IndexedFaceSet coordIndex field, scene-graph level=9, element #46, 1044 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_9_46_coordIndex()
		{
			MFInt32 IndexedFaceSet_9_46_coordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_9_46_coordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_9_46_coordIndex_2()));
			return IndexedFaceSet_9_46_coordIndex;
		}
		/** Large attribute array: IndexedFaceSet texCoordIndex field, scene-graph level=9, element #46, 1044 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_9_46_texCoordIndex()
		{
			MFInt32 IndexedFaceSet_9_46_texCoordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_9_46_texCoordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_9_46_texCoordIndex_2()));
			return IndexedFaceSet_9_46_texCoordIndex;
		}
		/** Large attribute array: Coordinate DEF='sfishp4GeoPoints' point field, scene-graph level=10, element #46, 669 total numbers made up of 223 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3f getsfishp4GeoPoints_10_46_point()
		{
			MFVec3f sfishp4GeoPoints_10_46_point = new MFVec3f()/*2.finalize*/
				.append(new MFVec3f(getsfishp4GeoPoints_10_46_point_1()))
				.append(new MFVec3f(getsfishp4GeoPoints_10_46_point_2()))
				.append(new MFVec3f(getsfishp4GeoPoints_10_46_point_3()));
			return sfishp4GeoPoints_10_46_point;
		}
		/** Large attribute array: TextureCoordinate point field, scene-graph level=10, element #47, 516 total numbers made up of 258 2-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec2f getTextureCoordinate_10_47_point()
		{
			MFVec2f TextureCoordinate_10_47_point = new MFVec2f()/*2.finalize*/
				.append(new MFVec2f(getTextureCoordinate_10_47_point_1()))
				.append(new MFVec2f(getTextureCoordinate_10_47_point_2()))
				.append(new MFVec2f(getTextureCoordinate_10_47_point_3()));
			return TextureCoordinate_10_47_point;
		}
		/** Large attribute array: IndexedFaceSet coordIndex field, scene-graph level=9, element #53, 1044 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_9_53_coordIndex()
		{
			MFInt32 IndexedFaceSet_9_53_coordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_9_53_coordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_9_53_coordIndex_2()));
			return IndexedFaceSet_9_53_coordIndex;
		}
		/** Large attribute array: IndexedFaceSet texCoordIndex field, scene-graph level=9, element #53, 1044 total numbers.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFInt32 getIndexedFaceSet_9_53_texCoordIndex()
		{
			MFInt32 IndexedFaceSet_9_53_texCoordIndex = new MFInt32()/*2.finalize*/
				.append(new MFInt32(getIndexedFaceSet_9_53_texCoordIndex_1()))
				.append(new MFInt32(getIndexedFaceSet_9_53_texCoordIndex_2()));
			return IndexedFaceSet_9_53_texCoordIndex;
		}
		/** Large attribute array: Coordinate DEF='sfishp5GeoPoints' point field, scene-graph level=10, element #53, 669 total numbers made up of 223 3-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec3f getsfishp5GeoPoints_10_53_point()
		{
			MFVec3f sfishp5GeoPoints_10_53_point = new MFVec3f()/*2.finalize*/
				.append(new MFVec3f(getsfishp5GeoPoints_10_53_point_1()))
				.append(new MFVec3f(getsfishp5GeoPoints_10_53_point_2()))
				.append(new MFVec3f(getsfishp5GeoPoints_10_53_point_3()));
			return sfishp5GeoPoints_10_53_point;
		}
		/** Large attribute array: TextureCoordinate point field, scene-graph level=10, element #54, 516 total numbers made up of 258 2-tuple values.
		 * Reassemble split array as single method to improve readability and runnability.
		 * Provide large array values via separate methods, hoping to avoid 'code too large' Java compilation errors. 
		 * Individual Java methods (including aggregated initializations) are limited to 64KB.
		 * @see https://stackoverflow.com/questions/2407912/code-too-large-compilation-error-in-java
		 * @see https://stackoverflow.com/questions/11437905/java-too-many-constants-jvm-error
		 */
		private MFVec2f getTextureCoordinate_10_54_point()
		{
			MFVec2f TextureCoordinate_10_54_point = new MFVec2f()/*2.finalize*/
				.append(new MFVec2f(getTextureCoordinate_10_54_point_1()))
				.append(new MFVec2f(getTextureCoordinate_10_54_point_2()))
				.append(new MFVec2f(getTextureCoordinate_10_54_point_3()));
			return TextureCoordinate_10_54_point;
		}

	/** The initialized model object, created within initialize() method. */
	private X3D x3dModel;

	/** 
	 * Provide a 
	 * <a href="https://dzone.com/articles/java-copy-shallow-vs-deep-in-which-you-will-swim" target="_blank">shallow copy</a>
	 * of the X3D model.
	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3D.html">X3D</a>
	 * @return SeaStarHighResolutionPrototype model
	 */
	public X3D getX3dModel()
	{	  
		return x3dModel;
	}
	   
    /** 
	 * Default main() method provided for test purposes, uses CommandLine to set global ConfigurationProperties for this object.
     * @param args array of input parameters, provided as arguments
	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3D.html#handleArguments-java.lang.String:A-">X3D.handleArguments(args)</a>
	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3D.html#validationReport--">X3D.validationReport()</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/CommandLine.html">CommandLine</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/CommandLine.html#USAGE">CommandLine.USAGE</a>
     * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/ConfigurationProperties.html">ConfigurationProperties</a>
     */
    public static void main(String args[])
    {
        X3D thisExampleX3dModel = new SeaStarHighResolutionPrototype().getX3dModel();

		boolean hasArguments = (args != null) && (args.length > 0);
		boolean validate = true; // default
		boolean argumentsLoadNewModel = false;
		String  fileName = new String();

		if (args != null)
		{
			for (String arg : args)
			{
				if (arg.toLowerCase().startsWith("-v") || arg.toLowerCase().contains("validate"))
				{
					validate = true; // making sure
				}
				if (arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_X3D) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_CLASSICVRML) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_X3DB) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_VRML97) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_EXI) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_GZIP) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_ZIP) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_HTML) ||
					arg.toLowerCase().endsWith(X3D.FILE_EXTENSION_XHTML))
				{
					argumentsLoadNewModel = true;
					fileName = arg;
				}
			}
		}
		if      (argumentsLoadNewModel)
			System.out.println("WARNING: \"X3dForWebAuthors.KelpForestExhibit.SeaStarHighResolutionPrototype\" model invocation is attempting to load file \"" + fileName + "\" instead of simply validating itself... file loading ignored.");
		else if (hasArguments) // if no arguments provided, this method produces usage warning
			thisExampleX3dModel.handleArguments(args);

		if (validate)
		{
			System.out.print("Java program \"X3dForWebAuthors.KelpForestExhibit.SeaStarHighResolutionPrototype\" self-validation test results: ");
			String validationResults = thisExampleX3dModel.validationReport();
            if (validationResults.startsWith("\n"))
                System.out.println();
			System.out.println(validationResults.trim());
		}
    }
}
