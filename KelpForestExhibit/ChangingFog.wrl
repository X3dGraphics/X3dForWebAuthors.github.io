#VRML V2.0 utf8
# X3D-to-VRML-97 XSL translation autogenerated by X3dToVrml97.xslt
# https://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: Saxonica

# [X3D] VRML V3.3 utf8
# PROFILE Immersive
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=https://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

# javascript code for rotation calculations was derived from:
# META "title" "ChangingFog.x3d"
# META "description" "A Fog node that adjusts as the viewer's orientation and position changes. This is a good candidate to become a Prototype since Fog does not automatically bind when inlined."
# META "creator" "Matthew Braun"
# META "created" "20 September 2001"
# META "modified" "20 October 2019"
# META "reference" "http://astronomy.swin.edu.au/pbourke/geometry/rotate/"
# META "rights" "Copyright (c) Matthew Braun 2001"
# META "subject" "Fog"
# META "identifier" "https://X3dGraphics.com/examples/X3dForWebAuthors/KelpForestExhibit/ChangingFog.x3d"
# META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
# META "license" "../license.html"

# [Scene] ========== ========== ==========

WorldInfo {
  title "ChangingFog.x3d"
}
NavigationInfo {
  avatarSize [ 0.01 0 0 ]
}
Viewpoint {
  description "Start"
  fieldOfView 0.9
  position 0 0 0
}
Viewpoint {
  description "Looking up from start"
  orientation 1 0 0 1.57
  position 0 0 0
}
Viewpoint {
  description "10m above, looking straight up"
  orientation 1 0 0 1.57
  position 0 10 0
}
Viewpoint {
  description "10m above start"
  position 0 10 0
}
Viewpoint {
  description "10m above, looking straight down"
  orientation 1 0 0 -1.57
  position 0 10 0
}
Viewpoint {
  description "10m below, looking down"
  orientation 1 0 0 -1.57
  position 0 -10 0
}
Viewpoint {
  description "10m below start"
  position 0 -10 0
}
Viewpoint {
  description "10m below, looking up"
  orientation 1 0 0 1.57
  position 0 -10 0
}
DEF Water Fog {
  color 0.2 0.2 0.4
  fogType "EXPONENTIAL"
}
# Proximity sensor must be large enough to encompass the entire scene
DEF ProxSensor ProximitySensor {
  size 1000 1000 1000
}
# TimeSensor triggering reduces frequency of calculations for performance reasons.
DEF Clock TimeSensor {
  loop TRUE
}
DEF ChangeVisibility Script {
  eventIn      SFTime	get_clock_hit
  field        SFBool	run_script FALSE
  eventIn      SFVec3f	get_depth
  eventOut     SFFloat	visibility_changed
  eventIn      SFRotation	set_visibility

	url [ "javascript: // ### X3D Browser.print() not supported by all VRML97 viewers, instead simply using print()

// REF: http://astronomy.swin.edu.au/pbourke/geometry/rotate/

function initialize () {
   visibility = 20;
   depth = 0;
   pos = (0,0,0);
   printing ('Position output from ProximitySensor.');
}

function get_clock_hit (clock_msg) {
     run_script = true;
}

function get_depth ( position ) {

   pos = position;
   depth = position[1] - 30;   

}

function set_visibility( rotation ) {

 if (run_script) {

//z coordinate of the default viewpoint direction(0,0,-1)
   initZ = -1;  

   rX = rotation[0];  // x coordinate of the rotation
   rY = rotation[1];  // y coordinate of the rotation
   rZ = rotation[2];  // z coordinate of the rotation

   theta = rotation[3];  // angle of rotation in radians
	
printing ('theta:' + theta);
     
   cosTheta = Math.cos(theta);
   sinTheta = Math.sin(theta);

printing ('cosTheta:' + cosTheta + ' sinTheta:'+ sinTheta);


// calculate the y coordinate of the point after rotation
/* there are 8 other terms in the full conversion, but 6 are equal
to zero because of the choice of a starting point on the z-axis. The
other two are not calculated since all we need is the y coordinate
*/
   finalY = ((1 - cosTheta) * rY * rZ - rX * sinTheta) * initZ;

printing ('final y:' + finalY);

//calculate the elevation/depression angle of the final point location

   elevation = Math.asin(finalY);

printing ('elevation:' + elevation);

   directionFactor = 1 + 0.2 * (4 * elevation / Math.PI);
   depthAdjust = (60 + depth)/60
   depthFactor = Math.max(depthAdjust,0.05);

   visibility_changed =  60 * depthFactor * directionFactor; 
   printing ('depth=' + depth + ', elevation=' + elevation + 
        ', visibility_changed=' + visibility_changed);
   run_script = false;
   
 }
}

    
" ]
}
ROUTE Clock.cycleTime TO ChangeVisibility.get_clock_hit
ROUTE ProxSensor.position_changed TO ChangeVisibility.get_depth
ROUTE ProxSensor.orientation_changed TO ChangeVisibility.set_visibility
ROUTE ChangeVisibility.visibility_changed TO Water.visibilityRange
# A set of arrows is used to show visibility and direction
DEF Pointer Transform {
  translation 0 0 -15
  children [
      Transform {
        translation 0 4 0
        children [
            Shape {
              geometry Cone {
                bottomRadius 0.4
              }
              appearance DEF ShapeApp Appearance {
                material Material {
                  ambientIntensity 0.8
                  diffuseColor 1 1 0.3
                  shininess 0.6
                }
              }
            }
        ]
      }
      Shape {
        geometry Cylinder {
          height 6
          radius 0.2
        }
        appearance USE ShapeApp
      }
  ]
}
Transform {
  translation 0 10 0
  children [
      USE Pointer
  ]
}
Transform {
  translation 0 -10 0
  children [
      USE Pointer
  ]
}
# A pair of disks used to show visibility
Transform {
  translation 0 15 0
  children [
      DEF Disk Shape {
        geometry Cylinder {
          height 0.01
        }
        appearance USE ShapeApp
      }
  ]
}
Transform {
  translation 0 -15 0
  children [
      USE Disk
  ]
}
# An indexed face set box used to bound the working area
Transform {
  scale 20 20 20
  children [
      DEF IFSBox Shape {
        appearance Appearance {
          material Material {
            diffuseColor 1 1 1
          }
        }
        geometry IndexedFaceSet {
          ccw FALSE
          colorIndex [ 0 2 2 2 2 1 ]
          colorPerVertex FALSE
          coordIndex [ 0 1 2 3 -1 7 6 5 4 -1 0 4 5 1 -1 1 5 6 2 -1 2 6 7 3 -1 3 7 4 0 ]
          coord Coordinate {
            point [ -1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 -1.0 -1.0 1.0 -1.0 -1.0 -1.0 1.0 1.0 -1.0 1.0 1.0 -1.0 -1.0 -1.0 -1.0 -1.0 ]
          }
          color Color {
            color [ 1 1 1 0 0 0 0.2 0.2 0.8 ]
          }
        }
      }
  ]
}
