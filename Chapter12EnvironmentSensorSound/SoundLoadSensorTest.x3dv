#X3D V3.3 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# https://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: Saxonica

PROFILE Immersive
# [X3D] version=3.3
# [X3D] noNamespaceSchemaLocation=https://www.web3d.org/specifications/x3d-3.3.xsd
# [head]

META "title" "SoundLoadSensorTest.x3d"
META "description" "UsingLoadSensor to test when AudioClip loading is complete"
META "created" "19 July 2008"
META "modified" "20 October 2019"
META "creator" "Leonard Daly and Don Brutzman"
META "reference" "https://X3dGraphics.com"
META "reference" "https://www.web3d.org/x3d/content/examples/X3dResources.html"
META "rights" "Copyright 2006, Daly Realism and Don Brutzman"
META "subject" "X3D book, X3D graphics, X3D-Edit, http://www.x3dGraphics.com"
META "identifier" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter12EnvironmentSensorSound/SoundLoadSensorTest.x3d"
META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
META "license" "../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

# Sound location y-value is 1.6 in order to match typical avatar height (in meters)
WorldInfo {
  title "SoundLoadSensorTest.x3d"
}
DEF SomeSound Sound {
  location 0 1.6 0
  maxBack 100
  maxFront 100
  minBack 10
  minFront 10
  source DEF WaterSounds AudioClip {
    description "Running Water"
    url [ "aqua.wav" "https://X3dGraphics.com/examples/X3dForWebAuthors/Chapter12EnvironmentSensorSound/aqua.wav" ]
  }
}
DEF ReportWhenLoaded LoadSensor {
  watchList [
    USE WaterSounds
  ]
}
ROUTE ReportWhenLoaded.loadTime TO WaterSounds.startTime
# send completion report to console
DEF ConsoleReport Script {
  inputOnly      SFBool	loadComplete
  inputOnly      SFTime	loadTime

	url [ "ecmascript: // ### X3D Browser.print() not supported by all VRML97 viewers, instead simply using print()

function initialize ()
{
	Browser.println ('Script initialize() complete');
}
function loadComplete (value)
{
	Browser.println ('LoadSensor AudioClip isLoaded=' + value);
}
function loadTime (value)
{
	Browser.println ('LoadSensor AudioClip loadTime=' + value);
}

    
" ]
}
ROUTE ReportWhenLoaded.isLoaded TO ConsoleReport.loadComplete
ROUTE ReportWhenLoaded.loadTime TO ConsoleReport.loadTime
# show visible indication of load waiting, complete
DEF PivotTextSigns Transform {
  children [
      # First sign indicates waiting...
      Shape {
        geometry Text {
          string [ "LoadSensor waiting for AudioClip..." ]
          fontStyle FontStyle {
            justify [ "MIDDLE" "MIDDLE"  ] 
            size 0.7
            ### style='ITALIC'
          }
        }
        appearance Appearance {
          material Material {
            emissiveColor 0.878431 0.262745 0
          }
        }
      }
      # Second sign indicates completed, initially rotated 90 degrees out of view
      Transform {
        rotation 0 1 0 1.57
        children [
            Shape {
              geometry Text {
                string [ "LoadSensor reports AudioClip loading complete." ]
                fontStyle FontStyle {
                  justify [ "MIDDLE" "MIDDLE"  ] 
                  size 0.7
                  ### style='ITALIC'
                }
              }
              appearance Appearance {
                material Material {
                  emissiveColor 0 0.278431 0.027451
                }
              }
            }
        ]
      }
  ]
}
DEF SignRotationInterpolator OrientationInterpolator {
  key [ 0 1 ]
  keyValue [ 0 1 0 0 0 1 0 -1.57 ]
}
DEF SignRotationClock TimeSensor {
  cycleInterval 0.8
}
ROUTE ReportWhenLoaded.loadTime TO SignRotationClock.startTime
ROUTE SignRotationClock.fraction_changed TO SignRotationInterpolator.set_fraction
ROUTE SignRotationInterpolator.value_changed TO PivotTextSigns.rotation
